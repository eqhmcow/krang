#!/usr/bin/perl 
use warnings;
use strict;

=pod

=head1 NAME

krang_create_lists

=head1 SYNOPSIS

   krang_create_lists

=head1 DESCRIPTION

Creates Krang::ListGroups and Krang::Lists based on lists.conf files in
element sets.  Usually called from C<krang_createdb>.

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" : 
      "${lib}";
    unshift @INC, $lib, "$lib/".$Config{archname};

    # load Krang
    eval { require Krang };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

use Krang::ClassFactory qw(pkg);
use Krang::Script;
use Krang::ClassLoader Conf => qw (InstanceElementSet KrangRoot);
use Krang::ClassLoader DB => qw(dbh);
use Krang::ClassLoader 'ListGroup';
use Krang::ClassLoader 'List';
use XML::Simple;

my ($help, $man, $password, $destroy);
my $verbose = 0;

# populate Krang::ListGroup and Krang::List info in
# db from lists.conf file, if exists.
my $list_conf_file = catfile(KrangRoot, 'element_lib',
                             InstanceElementSet, 'lists.conf');

if (-f $list_conf_file) {
    my $config = XMLin($list_conf_file, suppressempty => 1, forcearray => 1);
    my $dbh = dbh;
    
    foreach my $list_group (@{$config->{list_group}}) {
        my $lg = pkg('ListGroup')->new( name => $list_group->{list_group_name}, description => $list_group->{description} );
        $lg->save;
        my $prev_list_id;
        foreach my $list (@{$list_group->{list}}) {
            my %params;
            $params{name} = $list->{list_name};
            $params{list_group_id} = $lg->list_group_id;
            $params{parent_list_id} = $prev_list_id if $prev_list_id; 
            my $new_list = pkg('List')->new( %params );
            $new_list->save;
            $prev_list_id = $new_list->list_id 
        }
    }
}

print "Krang::ListGroups and pkg('Lists') created successfully.\n";

