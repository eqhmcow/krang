package Krang::ElementClass::TopLevel;
use strict;
use warnings;

use Krang::Log qw(debug info critical);
use base 'Krang::ElementClass';

=head1 NAME

Krang::ElementClass::TopLevel - base class for top-level element classes

=head1 SYNOPSIS

  package ElementSet::article;
  use base 'Krang::ElementClass::TopLevel';

  # override new() to setup element class parameters
  sub new { 
      my $pkg = shift;
      my %arg = (name      => "article",
                 children  => [ 'deck', 'paragraph', 'image' ],
                 @_);
      return $pkg->SUPER::new(%arg); 
  }

  1;

=head1 DESCRIPTION

This class serves as the base class for top-level element classes.
The root of an element tree must start with a sub-class of this class.
The methods provided allow this special element to control some
aspects of the Story or Category which contains it.  For example, the
C<build_url> method allows element classes to determine how a story
builds its URL.

Additionally, some methods make no sense for a top-level element
class, and they are stubbed out with implementations that croak.  For
example, the C<input_form()> method is useless for a top-level element
because the UI does not allow top-level elements to recieve input.

=head1 INTERFACE

=over

=cut

# stub out interface methods that should never be called on a
# top-level object
BEGIN {
    no strict 'refs'; # needed for glob assign
    foreach my $meth (qw(input_form param_names bulk_edit_data 
                         bulk_edit_filter view_data validate 
                         load_query_data)) {
        *{"Krang::ElementClass::TopLevel::$meth"} = 
          sub { croak('$meth called on a top-level element!'); };
    }
}

=item C<< $url = $class->build_url(story => $story, category => $category) >>

Builds a URL for the given story and category.  The default
implementation takes the category url and appends a URI encoded copy
of the story slug.  This may be overriden by top level elements to
implement alternative URL schemes.  See L<Krang::ElementClass::Cover>
for an example.

=cut

sub build_url {
    my ($self, %arg) = @_;
    my ($story, $category) = @arg{qw(story category)};
    croak("Category not defined!") unless $category;
    return $category->url . CGI::Util::escape($story->slug || '');
}

=item C<< @fields = $class->url_attributes() >>

Returns a list of Story attributes that are being used to compute the
url in build_url().  For example, the default implementation returns
('slug') because slug is the only story attribute used in the URL.
L<Krang::ElementClass::Cover> returns an empty list because it uses no
story attributes in its C<build_url()>.

=cut

sub url_attributes { ('slug') }

=item C<< @schedules = $class->default_schedules(element => $element, story_id ==> $story_id) >>

Called when a top-level object is created.  May return a list of
Krang::Schedule objects.  The default implementation returns and empty
list.

=cut

sub default_schedules { return (); }

=item C<< $file_name = $class->filename() >>

Returns the filename (independant of the extension) to be used when writing to disk data generated by this element tree.  Will return C<index> unless overridden.

=cut

sub filename {
    return 'index';
}

=item C<< $file_extension = $class->extension() >>

Returns the file extension (see filename()) to be used when writing to disk data generated by this element tree.  Will return C<.html> unless overridden.

=cut

sub extension {
    return '.html';
}

=back

=cut

1;
