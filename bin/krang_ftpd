#!/usr/bin/perl -w
use strict;

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;
use DateTime::TimeZone::Local;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Krang::Conf  and Krang::Log
    # (don't need to load Krang here because we won't
    # be slinging elements)
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;

######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

use Krang::ClassFactory qw(pkg);
use Krang::ClassLoader 'AddOn';

# call the init-handler of any AddOns being used
BEGIN {
    print STDERR "Initializing AddOns...\n";
    pkg('AddOn')->call_handler('InitHandler');
}
use Krang::ClassLoader Conf => qw(FTPPort FTPAddress KrangRoot);

# load the server
use Krang::ClassLoader 'FTP::Server';

# daemon mode
push(@ARGV, '-S');

# no conf file used
push(@ARGV, '-C', '/dev/null');

# pidfile in tmp/krang_ftpd.pid
push(@ARGV, '-P', catfile(KrangRoot, 'tmp', 'krang_ftpd.pid'));

# set port and address if specified
push(@ARGV, '-p', FTPPort);
if (FTPAddress ne "") {
    push(@ARGV, '-o', 'local address=' . FTPAddress);
}

# fix default limits which are set terribly low by default
push(@ARGV, '-o', 'limit memory=' . 64 * 1024);
push(@ARGV, '-o', 'limit nr files=1024');

# setup log
push(@ARGV, '-o', 'error log=' . catfile(KrangRoot, "logs", 'ftp.log'));

# propagate machine's timezone to FTP server
my $tz = DateTime::TimeZone::Local->TimeZone;
push(@ARGV, '-o', 'time zone=' . $tz->name) if $tz;

pkg('FTP::Server')->run;
