#!/usr/bin/perl 
use warnings;
use strict;

use File::Spec::Functions qw(catdir splitdir canonpath);
use FindBin qw($RealBin);
use Getopt::Long;
use Pod::Usage;
use Config;
use Carp;

=head1 NAME

krang_publish - command-line publishing utility for Krang.

=head1 SYNOPSIS

Publish everything (all stories & media for all sites) in a krang installation

  $ krang_publish --everything

Only publish assets that have been published before (but publish their latest versions)

  $ krang_publish --everything --republish-only

Only publish assets that have been published before (and re-publish their last-published versions)

  $ krang_publish --everything --republish-only --maintain-versions

Publish all assets of a single site, specified by site-id

  $ krang_publish --site-id 10

Publish all assets for a given category, specified by category-id

  $ krang_publish --category-id 10

Publish a specific story and all related assets (linked stories and media)

  $ krang_publish --story-id 10

Publish a series of stories and their related assets

  $ krang_publish --story-id 10,11,12

The alternative form for multiple-story publish

  $ krang_publish --story-id 10 --story-id 11 --story-id 12

=head1 DESCRIPTION

This script provides a command-line tool for publishing content in
Krang.  Large-scale publish jobs (e.g. entire sites, or moreso, entire
installations) should use this tool rather than the web UI, as the web
UI is not well-suited to larger publish runs.

=head1 OPTIONS

=over

=item --everything

Publish all content (stories and media) in a Krang installation.

Using the --everything flag will cause krang_publish to ignore the
--site-id, --category-id, --story-id and --media-id options.

=item --all-instances

Normally we just publish the content for a single instance:
either the one specified in the C<KRANG_INSTANCE> environment 
variable, or, if there's only one specified in krang.conf, for 
that. But sometimes after an upgrade (or installation 
of a new addon or element library uprade) it's convenient to be able 
to publish everything in all instances.

This only works along with the C<--everything> flag.

=item --site-id

Publish all content (stories and media) under the site specified by
the site-id.  May only be specified once.

Using the --site-id flag will cause krang_publish to ignore the
--story-id and --media-id options.

=item --limited-to-site

An option addendum to --site-id, any related stories or media that are
outside of the specified site will not be published.

B<WARNING>: The intended use case for this option would be an
installation that is already in production and underwent template
changes to a specific site, requiring a re-publish for that site
*only*.  This option should not be used unless you are absolutely sure
that stories and media outside of this site are in place in the
publish path, or broken links in the publish path may result.

=item --category-id

Publish all content (stories and media) under the category specified
by the category_id. May only be specified once.

Using the --category-id flag will cause krang_publish to ignore the
--story-id and --media-id options.

=item --below-category-id

Publish all content (stories and media) below the given category and
its child categories.  May only be specified once.

=item --limited-to-category

An option addendum to --category-id and --below-category-id, any
related stories or media that are outside of the specified category
will not be published.

B<WARNING>: The intended use case for this option would be an
installation that is already in production and underwent template
changes to a specific category, requiring a re-publish for that
category *only*.  This option should not be used unless you are
absolutely sure that stories and media outside of this category are in
place in the publish path, or broken links in the publish path may
result.

=item --story-id

Publishes the story and related media objects associated with the
story_id.  Supports multiple --story-id arguments, or a single
--story-id argument with a comma-separated list of IDs to publish more
than one story.

Using the --story-id flag will cause krang_publish to ignore the
--site-id, --category-id and --below-category-id options.

=item --story-class

Publishes only those stories that are of the specified element class.
You can specify this option multiple times to publish stories from
multiple element classes.

=item --media-id

Publish a single media object, specified by its media-id.  B<CURRENTLY
BROKEN>

=item --republish-only

This modifier will limit the publish process to assets that have been
published previously.

=item --maintain-versions

Adding this to a --republish-only will cause the last-published
version of each asset to be republished (instead of the
latest version). This mode is not available when publishing to 
preview.

=item --not-on-desk

This modifier will limit the publish process to assets that are not
currently on a desk (associated with a Krang::Desk object).

=item --version-check

This modifier will force krang_publish to check the last
published/previewed version of all assets related to the ones being
published.  Those that haven't changed since the last time they were
published/previewed will be skipped.

=item --to-preview

Publish files to preview rather than the publish location.

=item --verbose

Increases the level of output to STDOUT to give a more in-depth
explanation of what is going on.

=back

=cut

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Krang::Conf (don't need to load Krang here because we won't
    # be slinging elements)
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

# Krang Libs
use Krang::ClassFactory qw(pkg);
use Krang::ClassLoader Conf => qw(KrangRoot ElementLibrary SSLEngine);
use Krang::ClassLoader 'Script';
use Krang::ClassLoader 'Story';
use Krang::ClassLoader 'Media';
use Krang::ClassLoader 'Category';
use Krang::ClassLoader 'Site';
use Krang::ClassLoader 'Publisher';
use Krang::Cache;

use Time::HiRes qw(gettimeofday tv_interval);

# Setup - grabbing all the command-line options.

my %id = map { ($_, []) } qw(story media category below_category site);

my ($help, $man, $everything, $verbose, $all_instances) = (0, 0, 0, 0, 0);
my $limited_to_site     = 0;
my $limited_to_category = 0;
my $republish_only      = 0;
my $maintain_versions   = 0;
my $version_check       = 0;
my $increment           = 100;
my $media_only          = 0;
my $to_preview          = 0;
my $not_on_desk         = 0;
my @story_class         = ();

# for backwards compatibility, convert all underscores in options to hyphens
for (0 .. $#ARGV) {
    if ($ARGV[$_] =~ /^--\S+/ && $ARGV[$_] =~ /_/) {
        $ARGV[$_] =~ s/_/-/g;
    }
}

# then process options
GetOptions(
    'help'                => \$help,
    'man'                 => \$man,
    'verbose'             => \$verbose,
    'everything'          => \$everything,
    'all-instances'       => \$all_instances,
    'limited-to-site'     => \$limited_to_site,
    'limited-to-category' => \$limited_to_category,
    'republish-only'      => \$republish_only,
    'maintain-versions'   => \$maintain_versions,
    'not-on-desk'         => \$not_on_desk,
    'version-check'       => \$version_check,
    'to-preview'          => \$to_preview,
    'increment=i'         => \$increment,
    'story-class=s'       => \@story_class,

    # handle --story-id, --site-id, etc.
    (map { ("$_-id=s", $id{$_}) } keys %id)
) || pod2usage(2);

pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

pod2usage("Unrecognized options to krang_publish: '" . join(' ', @ARGV) . "'\n")
  if @ARGV;

if ($all_instances && !$everything) {
    warn "Can't use --all-instances without also using --everything!\n";
    exit(1);
}

if ($maintain_versions && $to_preview) {
    warn "Can't use --maintain-versions and --to-preview!\n";
    exit(1);
}

if ($maintain_versions && !$republish_only) {
    warn "Can't use --maintain-versions without also using --republish-only!\n";
    exit(1);
}

# turn on the cache
Krang::Cache::start();

# figure out how these command-line options affect find criteria.
my %find_options = (limit => $increment, offset => 0);
my %publish_args = (
    callback            => \&_progress_callback,
    skip_callback       => \&_skip_callback,
    version_check       => $version_check,
    remember_asset_list => 1
);

if ($republish_only) {
    $find_options{published}         = 1;
    $publish_args{maintain_versions} = $maintain_versions;
}

if ($not_on_desk) {
    $find_options{desk_id} = undef;
}

my $arg_string = "Publishing content with the following options:\n$0";

my $has_options = 0;

$arg_string .= " --to-preview"        if $to_preview;
$arg_string .= " --republish-only"    if $republish_only;
$arg_string .= " --maintain-versions" if $maintain_versions;
$arg_string .= " --not-on-desk"       if $not_on_desk;
$arg_string .= " --version-check"     if $version_check;
$arg_string .= " --all-instances"     if $all_instances;

if ($everything) {

    # removes checking for related stories/media.
    $publish_args{disable_related_assets} = 1;

    $arg_string .= " --everything";

    $has_options = 1;
} else {

    # NOTE: --site_id and --category-id options are mutually
    #       exclusive from --story-id and --media-id.
    if (@{$id{site}} || @{$id{category}} || @{$id{below_category}}) {
        if (@{$id{site}}) {
            $find_options{site_id} = $id{site}[0];
            $arg_string .= " --site-id $find_options{site_id}";
            $has_options = 1;
        } elsif (@{$id{category}}) {
            $find_options{category_id} = $id{category}[0];
            $arg_string .= " --category-id $find_options{category_id}";
            $publish_args{disable_related_assets} = $limited_to_category;
            $has_options = 1;
        } elsif (@{$id{below_category}}) {
            $find_options{below_category_id} = $id{below_category}[0];
            $arg_string .= " --below-category-id $find_options{below_category_id}";
            $publish_args{disable_related_assets} = $limited_to_category;
            $has_options = 1;
        }
    } elsif (@{$id{story}} || @{$id{media}}) {

        # you can specify both --story-id and --media-id
        # arguments simultaneously.
        if (@{$id{story}}) {
            $arg_string .= " --story-id $id{story}[0]";
            if ((@{$id{story}} == 1 && $id{story}[0] =~ /,/)) {
                $id{story} = [split /,/, $id{story}[0]];
            }
            $find_options{story_id} = $id{story};
            $has_options = 1;
        }

        if (@{$id{media}}) {
            $arg_string .= " --media-id $id{media}[0]";
            if ((@{$id{media}} == 1 && $id{media}[0] =~ /,/)) {
                $id{media} = [split /,/, $id{media}[0]];
            }
            $find_options{media_id} = $id{media};
            $has_options = 1;
        }
    }

    if (@story_class) {
        $arg_string .= " --story-class $_" foreach @story_class;
        $find_options{class} = \@story_class;
        $has_options = 1;
    }

}

$arg_string .= " (SSL enabled)" if SSLEngine and SSLEngine eq 'on' and $to_preview;

# If there are no command-line options, return the equivilant of --help.
pod2usage(1) unless $has_options;

# Start the publish process.
my $publisher = pkg('Publisher')->new();

########################################
## Time/Count Variables
##
my $increment_count = 0;
my $increment_time  = 0;

my $total_storytime  = 0;
my $total_storycount = 0;
my $total_mediatime  = 0;
my $total_mediacount = 0;
my %skipcount        = ();

my @assettime;
my $storycount = 0;
my $mediacount = 0;

# if the --everything option was specified, publish all media first,
# then stories.
if ($everything) {
    my @instances;
    if ($all_instances) {
        @instances = pkg('Conf')->instances();
    } else {
        @instances =
          ($ENV{KRANG_INSTANCE} || (pkg('Conf')->instances == 1 && (pkg('Conf')->instances)[0]));
    }
    foreach my $instance (@instances) {
        print "INSTANCE $instance\n" if @instances > 1;
        pkg('Conf')->instance($instance);
        publish_media(\%find_options, \%publish_args);
        publish_stories(\%find_options, \%publish_args);
    }

} else {
    if (   $find_options{site_id}
        || $find_options{category_id}
        || $find_options{below_category_id}
        || $find_options{media_id})
    {

        # publish media first - remove story_id arg
        my %media_find_options = %find_options;
        delete $media_find_options{story_id};
        delete $media_find_options{class};
        publish_media(\%media_find_options, \%publish_args);
    }

    if (   $find_options{site_id}
        || $find_options{category_id}
        || $find_options{below_category_id}
        || $find_options{story_id}
        || $find_options{class})
    {
        my %story_find_options = %find_options;
        delete $story_find_options{media_id};
        publish_stories(\%story_find_options, \%publish_args);
    }
}

print
  "\n\nSTATUS: Publish completed.\n======================================================================\n";
print "$arg_string\n\nResults:\n";
print "\ntype\t\tnumber published\ttime(seconds)\tseconds/asset\n";
print "----------------------------------------------------------------------\n";
printf("stories\t\t%i\t\t\t%.02f\t\t%.02f\n",
    $total_storycount, $total_storytime,
    (($total_storytime > 0) ? ($total_storytime / $total_storycount) : 0));
printf("media\t\t%i\t\t\t%.02f\t\t%.02f\n",
    $total_mediacount, $total_mediatime,
    (($total_mediatime > 0) ? ($total_mediatime / $total_mediacount) : 0));

print "----------------------------------------------------------------------\n";
printf(
    "TOTAL:\t\t%i assets\t\t%.02f seconds\n\n",
    ($total_storycount + $total_mediacount),
    $increment_time
);

if (keys %skipcount) {
    my $total_errors = 0;
    print "\n\nPublish Errors:\n\n";
    print "type\t\terror type\t\tnumber\n";
    print "----------------------------------------------------------------------\n";
    foreach my $t (keys %skipcount) {
        foreach my $e (keys %{$skipcount{$t}}) {
            $total_errors += $skipcount{$t}{$e};
            printf("%s\t\t%s\t%i\n", $t, $e, $skipcount{$t}{$e});
        }
    }
    print "----------------------------------------------------------------------\n";
    print "TOTAL:\t\tskipped in publish:\t$total_errors\n\n";
}

my ($hits, $loads, $fill) = Krang::Cache::stats();
printf("CACHE HITS:\t\t%d\n", $hits)
  if $verbose and Krang::Cache::active();
printf("CACHE FILL AT END:\t\t%d\n\n", $fill)
  if $verbose and Krang::Cache::active();

sub publish_media {

    my ($global_find_options, $publish_args) = @_;
    my $find_options = {%$global_find_options};

    # make sure we're starting at the beginning.
    $find_options->{offset} = 0;

    # make sure we don't have 'desk_id'
    delete $find_options->{desk_id};

    while (my @media = pkg('Media')->find(%{$find_options})) {
        my @starttime = gettimeofday();
        @assettime = @starttime;

        eval {
            if ($to_preview)
            {
                foreach my $media (@media) {
                    $publisher->preview_media(media => $media, %$publish_args);
                }
            } else {
                $publisher->publish_media(media => \@media, %{$publish_args});
            }
        };
        if (my $err = $@) {
            if (ref $err && $err->isa('Krang::Publisher::FileWriteError')) {
                print STDOUT sprintf("ERROR:\n%s\:\nsource='%s'\ndestination='%s'\nerror='%s'\n",
                    $err->{message}, $err->{source}, $err->{destination}, $err->{system_error});
                croak;
            } else {
                croak($err);
            }
        }

        my $endtime = tv_interval(\@starttime);

        print sprintf(
            "STATUS: media %i - %i published in %.02f seconds.\n",
            ($find_options->{offset} + 1),
            ($find_options->{offset} + @media), $endtime
        );

        # because Krang::Publisher does not have callback implemented
        # for preview_media, need to keep track of media preview time
        # and # of media previewed here...
        $mediacount      += @media   if $to_preview;
        $total_mediatime += $endtime if $to_preview;

        $increment_time  += $endtime;
        $increment_count += @media;

        $total_mediacount += $mediacount;

        $mediacount = 0;

        last if (@media < $increment);
        $find_options->{offset} += $increment;
    }

    # cleanup.
    $find_options->{offset} = 0;

}

sub publish_stories {
    my ($find_options, $publish_args) = @_;

    # make sure offset is reset
    $find_options->{offset} = 0;

    # add show_hidden option for stories.
    $find_options->{show_hidden} = 1;

    while (my @stories = pkg('Story')->find(%{$find_options})) {

        if (@stories == $increment) {
            $publish_args->{keep_asset_list} = 1;
        } else {
            $publish_args->{keep_asset_list} = 0;
        }

        my @starttime = gettimeofday();
        @assettime = @starttime;

        eval {
            if ($to_preview)
            {
                foreach my $story (@stories) {
                    $publisher->preview_story(story => $story, %$publish_args);
                }

            } else {
                $publisher->publish_story(story => \@stories, %$publish_args);
            }
        };

        if (my $err = $@) {

            # report something, anything!
            print STDERR sprintf("Publish failed for unknown reason: '%s'\n", $err);
            exit;
        }

        my $endtime = tv_interval(\@starttime);

        print sprintf(
            "STATUS: Stories %i - %i (%i stories, %i media) published in %.02f seconds.\n",
            ($find_options->{offset} + 1),
            ($find_options->{offset} + @stories),
            $storycount, $mediacount, $endtime
        );

        # add everything up.
        $increment_time  += $endtime;
        $increment_count += @stories;

        $total_storycount += $storycount;
        $total_mediacount += $mediacount;

        $storycount = 0;
        $mediacount = 0;

        last if (@stories < $increment);
        $find_options->{offset} += $increment;
    }

    # cleanup
    delete $find_options->{show_hidden};

    $find_options->{offset} = 0;

}

sub _skip_callback {
    my %args = @_;

    my $object = $args{object};
    my $error  = $args{error};

    my $id   = ($object->isa('Krang::Story')) ? $object->story_id : $object->media_id;
    my $type = ($object->isa('Krang::Story')) ? 'stories'         : 'media';

    if ($error eq 'checked_out') {
        print sprintf(
            "WARNING: %s ID=%i was not published - it is currently checked out by User ID=%i\n",
            (ref $object),
            $id, $object->checked_out_by
        );

        $skipcount{$type}{CheckedOut}++;
        return;
    }

    if (ref $error) {

        # if there is an error, figure out what it is, create the
        # appropriate message and return.
        if ($error->isa('Krang::ElementClass::TemplateNotFound')) {
            print sprintf(
                "ERROR:\t%s ID=%i not published - missing template:\n\tcategory:\t'%s'\n\ttemplate:\t'%s'\n",
                (ref $object),
                $id, $error->category_url, $error->template_name
            );
            $skipcount{$type}{TemplateNotFound}++;
            return;
        } elsif ($error->isa('Krang::ElementClass::TemplateParseError')) {
            print sprintf(
                "ERROR:\t%s ID=%i not published - template error:\n\ttemplate:\t'%s'\n\tcategory:\t'%s'\n\tparse error:\t'%s'\n",
                (ref $object),
                $id, $error->template_name, $error->category_url, $error->message
            );
            $skipcount{$type}{TemplateParseError}++;
            return;
        } elsif ($error->isa('Krang::Publisher::FileWriteError')) {
            print sprintf(
                "ERROR: %s ID=%i not published to '%s' - output error:\n\terror:\t'%s'\n",
                (ref $object),
                $id, $error->destination, $error->system_error
            );
            $skipcount{$type}{FileWriteError}++;
            return;
        } elsif ($error->isa('Krang::Publisher::ZeroSizeOutput')) {
            print sprintf(
                "ERROR: %s ID=%i not published to '%s' - the output is zero-size",
                (ref $object),
                $error->story_id, $error->category_url
            );
            $skipcount{$type}{ZeroSizeOutput}++;
            return;
        }

        # no other error object handled right now.
        print sprintf(
            "WARNING: %s ID=%i was not published for error='%s'\n",
            (ref $object),
            $id, ref $error
        );
        $skipcount{$type}{UnknownError}++;
        return;
    }

    # unknown error.
    print sprintf(
        "WARNING: %s ID=%i was not published for unknown error='%s'\n",
        (ref $object),
        $id, $error
    );

    $skipcount{$type}{UnknownError}++;
}

# update the progress bar during preview or publish
sub _progress_callback {
    my %arg = @_;
    my ($object, $counter, $total) = @arg{qw(object counter total)};
    my $string;

    my $endtime = tv_interval(\@assettime);

    if ($object->isa('Krang::Story')) {
        $string .= sprintf("Published story_id=%i (time=%.02f url=%s)",
            $object->story_id, $endtime, $object->url);
        $storycount++;
        $total_storytime += $endtime;
    } elsif ($object->isa('Krang::Media')) {
        $string .= sprintf("Published media_id=%i (time=%.02f url=%s)",
            $object->media_id, $endtime, $object->url);
        $mediacount++;
        $total_mediatime += $endtime;
    } else {
        print "Unknown object type=" . (ref $object) . "\n";
    }

    if ($verbose) {
        print "$string\n";
    }
    @assettime = gettimeofday();
}
