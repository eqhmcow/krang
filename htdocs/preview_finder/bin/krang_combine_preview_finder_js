#!/usr/bin/env perl
use warnings;
use strict;

=pod

=head1 NAME

krang_combine_preview_finder_js - One JavaScript file for the template picker

=head1 SYNOPSIS

   krang_combine_preview_finder_js --minify --verbose

=head1 DESCRIPTION

This script is normally called by L<bin/krang_ctl> at Krang startup.
It combines all of the JavaScript files needed for the "Preview
Finder" feature and puts it into htdocs/js/

=head1 OPTIONS

The script takes the following options:

=over 4

=item --minify

Minify the combined file.

=item --verbose

Prints more information about which files are being combined together
and what your savings are.

=item --help

=item --man

=back

=cut

use File::Find;
use File::Spec::Functions qw(catdir catfile splitdir canonpath);
use File::Path;
use FindBin qw($RealBin);
use Config;

BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 3]);

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Krang::Conf (don't need to load Krang here because we won't
    # be slinging elements)
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

our ($help, $man, $verbose, $minify);

use Getopt::Long;
use Pod::Usage;
my $result = GetOptions(
    'minify'   => \$minify,
    'verbose+' => \$verbose,
    'help'     => \$help,
    'man'      => \$man,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

use Krang::ClassFactory qw(pkg);
use Krang::ClassLoader Script => 'instance_agnostic';
use Krang::ClassLoader Conf   => qw(KrangRoot);
use JavaScript::Minifier::XS qw(minify);

# list of files relative to /htdocs
my @files = qw(
  htdocs/preview_finder/js/prototype.js
  htdocs/js/scriptaculous.js
  htdocs/proto_popup/src/proto_popup_base.js
  htdocs/preview_finder/js/preview_finder.js
  htdocs/preview_finder/js/hide_load_indicator.js
);
@files = map { catfile(KrangRoot, $_) } @files;

# combined js file
my $preview_finder_js = catfile(KrangRoot, 'htdocs', 'js', "preview_finder.js");

say("Combining template picker javascript '$preview_finder_js'...");
combine_files();
say(" Done.\n");

#   END Main

sub combine_files {
    my $js_contents;
    local $/;
    foreach my $file (@files) {
        if (-e $file) {
            open(my $IN, '<', $file) or die "Could not open file $file for reading: $!";

            # minify the JS file
            if ($minify) {
                $js_contents .= minify(<$IN>) . ';';
            } else {
                $js_contents .= <$IN> . ';';
            }
        } else {
            warn "File $file does not exist.";
        }
    }

    open(my $JS, '>', $preview_finder_js) or die "Could not open file $preview_finder_js for writing: $!";
    print $JS $js_contents;
    close($JS);
}

sub say { print @_ if $verbose }
