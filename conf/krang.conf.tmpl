###########################################################################
#
# Global Krang Setup
#
###########################################################################

#
# KrangUser and KrangGroup: the UNIX user and group for Krang.  All
# Krang processes run as this user/group and all files must be owned by
# this user.
#
KrangUser <tmpl_var KrangUser>
KrangGroup <tmpl_var KrangGroup>

#
# MySQL user and password for Krang
#
DBUser <tmpl_var DBUser>
DBPass "<tmpl_var DBPass>"
<tmpl_if DBHost>
DBHost "<tmpl_var DBHost>"
</tmpl_if>

# the socket file used to connect to a local MySQL server (this is needed only 
# if you get "socket file not found" connection errors from DBI.pm)
<tmpl_if DBSock>
DBSock "<tmpl_var DBSock>"
</tmpl_if>

# 
# ApacheAddr and ApachePort: the IP and port for the Apache server
#
ApacheAddr <tmpl_var IPAddress>
ApachePort <tmpl_var ApachePort>
<tmpl_if SSL_ENABLED>ApacheSSLPort <tmpl_var ApacheSSLPort></tmpl_if>

#
# HostName: the virtual host for the root server, which
# displays a list of available instances.
#
HostName <tmpl_var HostName>

#
# LogLevel: how much logging detail to include in krang.log.  Valid setting are
# 1 (critical only), 2 (critical and info) and 3 (critical, info and
# debug).  A setting of 2 is standard for production use.
#
LogLevel 2

#
# FTPAddress and FTPPort: set this to the address and port of the
# Krang internal FTP server.
#
FTPAddress <tmpl_var IPAddress>
FTPPort <tmpl_var FTPPort>
FTPHostName <tmpl_var FTPHostName>

#
# SMTPServer: Krang needs to be able to mail alerts to users.  Set
# this to a working SMTP server.
#
SMTPServer <tmpl_var SMTPServer>

#
# FromAddress: set this to the From: address Krang should use when
# sending mail.
#
FromAddress krangmailer@<tmpl_var HostName>

#
# Configure Bugzilla settings here.  Unless EnableBugzilla is 1, none
# of the rest will be used.
#
EnableBugzilla 0
BugzillaServer krang-services.ops.about.com/bugzilla
BugzillaEmail krang_test@yahoo.com
BugzillaPassword whale
BugzillaComponent 'Auto-submitted Bugs'

#
# Select a skin which will determine the look of the UI.  Available
# skins are stored in the skins/ directory.
#
Skin Default

#
# Set the number of child processes the scheduler daemon
# can spawn when handling tasks.
# Current wisdom suggests a 3:1 ratio of children to available CPUs.
#
SchedulerMaxChildren 3

<tmpl_if SSL_ENABLED>
##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#
# SSL Engine Switch:
# Enable/Disable SSL for this virtual host.
#
SSLEngine  <tmpl_var SSLEngine>

#
# Pass Phrase Dialog:
# Configure the pass phrase gathering process.
# The filtering dialog program (`builtin' is a internal
# terminal dialog) has to provide the pass phrase on stdout.
#
SSLPassPhraseDialog  <tmpl_var SSLPassPhraseDialog>

#
# Inter-Process Session Cache:
# Configure the SSL Session Cache timeout (in seconds).
#
SSLSessionCacheTimeout  <tmpl_var SSLSessionCacheTimeout>

#
# Pseudo Random Number Generator (PRNG):
# Configure one or more sources to seed the PRNG of the 
# SSL library. The seed data should be of good random quality.
# WARNING! On some platforms /dev/random blocks if not enough entropy
# is available. This means you then cannot use the /dev/random device
# because it would lead to very long connection times (as long as
# it requires to make more entropy available). But usually those
# platforms additionally provide a /dev/urandom device which doesn't
# block. So, if available, use this one instead. Read the mod_ssl User
# Manual for more details.
#
SSLRandomSeedStartup <tmpl_var SSLRandomSeedStartup>
SSLRandomSeedConnect <tmpl_var SSLRandomSeedConnect>

#
# Usable SSL protocol flavours
#
SSLProtocol  "<tmpl_var SSLProtocol>"

#
# list the ciphers that client client is permitted to negotiate
#
SSLCipherSuite  "<tmpl_var SSLCipherSuite>"

#
# Client Authentication (Type):
# Client certificate verification type and depth.  Types are
# none, optional, require and optional_no_ca.  Depth is a
# number which specifies how deeply to verify the certificate
# issuer chain before deciding the certificate is not valid.
#
SSLVerifyClient  <tmpl_var SSLVerifyClient>
SSLVerifyDepth   <tmpl_var SSLVerifyDepth>

#   Access Control:
#   With SSLRequire you can do per-directory access control based
#   on arbitrary complex boolean expressions containing server
#   variable checks and other lookup directives.  The syntax is a
#   mixture between C and Perl.  See the mod_ssl documentation
#   for more details.
#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
#            or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn't wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#     This forces an unclean shutdown when the connection is closed, i.e. no
#     SSL close notify alert is send or allowed to received.  This violates
#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
#     this when you receive I/O errors because of the standard approach where
#     mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#     This forces an accurate shutdown when the connection is closed, i.e. a
#     SSL close notify alert is send and mod_ssl waits for the close notify
#     alert of the client. This is 100% SSL/TLS standard compliant, but in
#     practice often causes hanging connections with brain-dead browsers. Use
#     this only for browsers where you know that their SSL implementation
#     works correctly. 
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
SetEnvIf "User-Agent \".*MSIE.*\"         \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0"

#
#  SSL Engine Options:
#  Set various options for the SSL engine.
#  o FakeBasicAuth:
#    Translate the client X.509 into a Basic Authorisation.  This means that
#    the standard Auth/DBMAuth methods can be used for access control.  The
#    user name is the `one line' version of the client's X.509 certificate.
#    Note that no password is obtained from the user. Every entry in the user
#    file needs this password: `xxj31ZMTZzkVA'.
#  o ExportCertData:
#    This exports two additional environment variables: SSL_CLIENT_CERT and
#    SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#    server (always existing) and the client (only existing when client
#    authentication is used). This can be used to import the certificates
#    into CGI scripts.
#  o StdEnvVars:
#    This exports the standard SSL/TLS related `SSL_*' environment variables.
#    Per default this exportation is switched off for performance reasons,
#    because the extraction step is an expensive operation and is usually
#    useless for serving static content. So one usually enables the
#    exportation for CGI and SSI requests only.
#  o CompatEnvVars:
#    This exports obsolete environment variables for backward compatibility
#    to Apache-SSL 1.x, mod_ssl 2.0.x, Sioux 1.0 and Stronghold 2.x. Use this
#    to provide compatibility to existing CGI scripts.
#  o StrictRequire:
#    This denies access when "SSLRequireSSL" or "SSLRequire" applied even
#    under a "Satisfy any" situation, i.e. when it applies access is denied
#    and no other module can change it.
#  o OptRenegotiate:
#    This enables optimized SSL connection renegotiation handling when SSL
#    directives are used in per-directory context. 
#
SSLOptions  "<tmpl_var SSLOptions>"

#
# Logging:
# Log levels are (ascending order: higher ones include lower ones):
# none, error, warn, info, trace, debug.
#
SSLLogLevel  <tmpl_var SSLLogLevel>

#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
#CustomLog /home/bobesch/krang-devel/krang_ssl/apache/logs/ssl_request_log \
#          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
</tmpl_if>

###########################################################################
#
# Instance Configuration
#
# Each instance needs its own Instance block below containing
# instance-specific configuration.
#
###########################################################################

#
# Instance: each instance has its own block named for the instance.
#
<Instance <tmpl_var InstanceHostName>>

   # the UI display name for this instance
   InstanceDisplayName <tmpl_var InstanceDisplayName>

   # the virtual host users will use to access this instance
   InstanceHostName <tmpl_var InstanceHostName>

   # MySQL database name for this instance
   InstanceDBName <tmpl_var InstanceDBName>

   # the element set to be used in this instance.  Instances may share
   # element sets.
   InstanceElementSet <tmpl_var InstanceElementSet>

<tmpl_if SSL_ENABLED>
   ##
   ## SSL Virtual Host Context
   ##
  
   # the virtual host IP address
   InstanceHostIPAddress <tmpl_var InstanceHostIPAddress>

   # the virtual host port
   InstanceHostPort <tmpl_var InstanceHostPort>

   # the virtual host SSL port
   InstanceHostSSLPort <tmpl_var InstanceHostSSLPort>

   #
   # See SSL Global Context for comments on the following directives
   #
   SSLEngine  <tmpl_var SSLEngine>
   SSLProtocol  "<tmpl_var SSLProtocol>"
   SSLCipherSuite  "<tmpl_var SSLCipherSuite>"
   SSLVerifyClient  <tmpl_var SSLVerifyClient>
   SSLVerifyDepth   <tmpl_var SSLVerifyDepth>
   SSLLogLevel      <tmpl_var SSLLogLevel>
   #SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
   #            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
   #            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
   #            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
   #            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
   #           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
   #CustomLog /home/bobesch/krang-devel/krang_ssl/apache/logs/ssl_request_log \
   #		 "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
</tmpl_if>
</Instance>
