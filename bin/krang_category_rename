#!/usr/bin/env perl
use strict;
use warnings;

=pod

=head1 NAME

krang_category_rename - rename Krang categories

=head1 SYNOPSIS

  krang_category_rename foo.com/from/files/ foo.com/to/media/images/

=head1 DESCRIPTION

This script renames categories, maintaining all sub-categories,
stories, media and templates.  

Interstitial categories will be created as needed, so you can rename
"foo.com/bar" to "foo.com/bif/bing/bong" even if "foo.com/bif" and
"foo.com/bif/bing" don't exist.  However, missing sites will not be
created.

=head1 OPTIONS

=over 4

=item --verbose

Prints a running dialog of what's happening.

=back

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Krang::Conf
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

use Krang::ClassFactory qw(pkg);
use Krang::ClassLoader 'Script';
use Krang::ClassLoader Conf => qw(KrangRoot ElementLibrary);
use Getopt::Long;
use Pod::Usage;
use Krang::ClassLoader 'Category';
use Krang::ClassLoader 'Site';

my ($help, $man);
my $verbose = 0;
pod2usage(2)
  unless GetOptions(
    help       => \$help,
    man        => \$man,
    'verbose+' => \$verbose,
  );
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

pod2usage("Wrong number of options to krang_category_rename.\n")
  if @ARGV != 2;
my ($from_url, $to_url) = @ARGV;
$from_url .= '/' if $from_url and $from_url !~ m!/$!;
$to_url   .= '/' if $to_url   and $to_url !~ m!/$!;

my ($from_cat) = pkg('Category')->find(url => $from_url);
die "Source category '$from_url' does not exist.\n"
  unless $from_cat;
die "Source category '$from_url' is a root category, cannot rename.\n"
  unless $from_cat->parent_id;
my ($to_cat) = pkg('Category')->find(url => $to_url);
die "Target category '$to_url' already exists.\n"
  if $to_cat;
die "Target category '$to_url' is within '$from_url', cannot rename.\n"
  if $to_url =~ m!^$from_url!;

# split to_url into to_parent_url and to_dir
my ($to_parent_url, $to_dir) = $to_url =~ m!^(.*/)([^/]+)/$!;
print STDERR "Renaming as child of '$to_parent_url' with dir '$to_dir'.\n"
  if $verbose;
my ($to_parent) = pkg('Category')->find(url => $to_parent_url);

# parent doesn't exist, create it if possible
unless ($to_parent) {

    # make sure site exists, since this script won't create new sites
    my ($to_site_url, $to_dirs) = $to_parent_url =~ m!^([^/]+)/(.*)$!;
    my ($to_site) = pkg('Site')->find(url => $to_site_url);
    die "Unable to find target site '$to_site_url'.\n"
      unless $to_site;

    # get list of dirs
    my @to_dirs = grep { defined } split('/', $to_dirs);

    # start pointer at the root for this site
    my ($p) = pkg('Category')->find(url => $to_site_url . '/');
    die "Unable to find root category for site '$to_site_url'.\n"
      unless $p;

    # walk through dirs, creating those that don't exist.
    for (my $x = 0 ; $x < @to_dirs ; $x++) {
        my $url = $to_site_url . '/' . join('/', @to_dirs[0 .. $x]) . '/';
        my ($cat) = pkg('Category')->find(url => $url);
        unless ($cat) {
            print STDERR "Creating category $url...\n";
            $cat = pkg('Category')->new(
                dir       => $to_dirs[$x],
                parent_id => $p->category_id
            );
            $cat->save();
        }

        # pointer advance
        $p = $cat;
    }

    # should have a parent now
    ($to_parent) = pkg('Category')->find(url => $to_parent_url);
    die "Failed to create parent.\n"
      unless $to_parent;
}

# adjust parentage
$from_cat->parent_id($to_parent->category_id)
  unless $from_cat->parent_id == $to_parent->category_id;

# adjust dir name
$from_cat->dir($to_dir)
  unless $from_cat->dir eq $to_dir;

# all done
print STDERR "Renaming category...\n" if $verbose;
$from_cat->save();
print "Rename complete.\n";
