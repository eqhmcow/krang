#!/usr/bin/env perl
use strict;
use warnings;

=pod

=head1 NAME

krang_src_dependency_check - Check the dependencies of a Perl module in a src/ directory

=head1 SYNOPSIS

  krang_src_dependency_check --file src/Bit-Vector-6.4.tar.gz

  krang_src_dependency_check --dir extensions/Foo/src 

=head1 DESCRIPTION

This script will print a list of all of the modules used by another module, given
the source tarball file.

This list will also give information about whether that dependency is a part of
Perl's CORE or already installed as part of Krang. It also works on source modules
used in Krang extensions as well.

=head1 OPTIONS

=over

=item --file

The path of the source tarball in question.

=item --dir

The directory in which to find tarballs. All files that
end in F<.tar.gz> will be examined in that directory.

=back

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Krang
    eval { require Krang };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

use Krang::ClassLoader Conf => qw(KrangRoot);
use Module::Depends::Intrusive;
use File::Temp qw(tempdir);
use File::Copy;
use File::Spec::Functions qw(catfile catdir);
use File::Basename;
use Getopt::Long;
use Pod::Usage;
use Cwd qw(getcwd);

my ($help, $man, $file, $dir);
GetOptions(
    help     => \$help,
    man      => \$man,
    'file=s' => \$file,
    'dir=s'  => \$dir,
);

pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
pod2usage("Missing required --file or --dir parameter.") unless $file or $dir;
pod2usage("Can't use --file and --dir at the same time.") if $file and $dir;

if ($file) {
    check_deps($file);
} else {
    my @files = glob(catfile($dir, '*.tar.gz'));
    my $org_chdir = getcwd();
    foreach (@files) {
        check_deps($_);
        chdir $org_chdir;
    }
}

sub check_deps {
    my $filename = shift;

    # make a temp copy of the tarball
    my $tmpdir = tempdir(
        CLEANUP => 1,
        DIR     => catdir(KrangRoot, 'tmp'),
    );
    my ($name, $path, $suffix) = fileparse($filename, '.tar.gz');
    my $new_file = catfile($tmpdir, "$name$suffix");
    copy($filename, $new_file)
      or die "Could not copy file '$filename' to '$new_file': $!";

    # untar it
    chdir($tmpdir) or die "Could not change directories to '$tmpdir': $!";
    system("tar -zxvf $new_file 2>&1 > /dev/null") == 0
      or die "Could not untar '$new_file': $@ - $!";

    # get the name of the newly created directory (not every distro does the same thing)
    my $distro_dir;
    opendir(my $DH, $tmpdir) or die "Could not open directory '$tmpdir': $!";
    while (my $entry = readdir $DH) {
        next if $entry =~ /^\./;
        next if $entry =~ /\.tar\.gz$/;
        $distro_dir = $entry;    # should be only one thing in there
        last;
    }
    closedir($DH) or die "Could not close directory '$tmpdir': $!";

    my $deps =
      Module::Depends::Intrusive->new->dist_dir(catdir($tmpdir, $distro_dir))
      ->find_modules->requires();
    my $max_length = 0;
    foreach (keys %$deps) {
        $max_length = length($_) if (length $_ > $max_length);
    }
    my $header = "\n" . '=' x length($filename) . "\n$filename\n" . '=' x length($filename) . "\n";
    print $header;
    my $format = "  \%-${max_length}s   => \%-6s (\%s)\n";

    if (scalar keys %$deps) {
        print "\n";
        foreach my $module (keys %$deps) {
            next if ($module eq 'perl');    # we don't need to verify this
            eval "require $module";
            if ($@) {
                printf($format, $module, 'NOT OK', 'Not found');
            } else {
                my $krang_lib     = catdir(KrangRoot, 'lib');
                my $krang_ext_lib = catdir(KrangRoot, 'addons');
                my $mod_file      = "$module.pm";
                $mod_file =~ s/::/\//g;
                if ($INC{$mod_file}) {
                    my $mod_path = $INC{$mod_file};
                    if ($mod_path =~ /\Q$krang_lib\E/) {
                        printf($format, $module, 'OK', 'Found in Krang lib');
                    } elsif ($mod_path =~ m#\Q$krang_ext_lib\E/([^/]+)/#) {
                        printf($format, $module, 'OK', "Found in Krang extension '$1' lib");
                    } elsif ($mod_path =~ /\Q$Config{sitelib}\E/) {
                        printf($format, $module, 'NOT OK', 'Found in Site lib');
                    } elsif ($mod_path =~ /\Q$Config{vendorlib}\E/) {
                        printf($format, $module, 'OK?', 'Found in Vendor lib');
                    } elsif ($mod_path =~ /\Q$Config{privlib}\E/) {
                        printf($format, $module, 'OK', 'Found in CORE');
                    } else {
                        printf($format, $module, 'NOT OK', "Found in $mod_path");
                    }
                } else {
                    printf($format, $module, 'NOT OK', 'Not found');
                }
            }
        }
    } else {
        print "No dependencies.\n";
    }
    print "\n";
}

