ServerType           standalone
ServerRoot           <tmpl_var ApacheRoot>
ServerAdmin          root@localhost
ServerSignature      Email
PidFile              <tmpl_var KrangRoot>/tmp/httpd.pid
DocumentRoot         <tmpl_var KrangRoot>/htdocs
User                 <tmpl_var KrangUser>
Group                <tmpl_var KrangGroup>
KeepAlive            Off
MaxKeepAliveRequests 100
KeepAliveTimeout     15
MinSpareServers      5
MaxSpareServers      10
StartServers         5
MaxClients           150
MaxRequestsPerChild  100
ErrorLog             <tmpl_var KrangRoot>/logs/apache_error_log
LogFormat            "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
CustomLog            <tmpl_var KrangRoot>/logs/apache_access_log combined
LogLevel             info
TypesConfig          <tmpl_var ApacheRoot>/conf/mime.types
UseCanonicalName     On
HostNameLookups      Off
Timeout              600

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you
# have to place corresponding `LoadModule' lines at this location so the
# directives contained in it are actually available _before_ they are used.
# Please read the file http://httpd.apache.org/docs/dso.html for more
# details about the DSO mechanism and run `httpd -l' for the list of already
# built-in (statically linked and thus always available) modules in your httpd
# binary.
#
# Note: The order in which modules are loaded is important.  Don't change
# the order below without expert advice.
#
# Example:
# LoadModule foo_module libexec/mod_foo.so
LoadModule mime_magic_module  libexec/mod_mime_magic.so
# LoadModule proxy_module       libexec/libproxy.so
<tmpl_if EnableSSL>
LoadModule rewrite_module     libexec/mod_rewrite.so
LoadModule ssl_module         libexec/libssl.so
LoadModule setenvif_module    libexec/mod_setenvif.so
</tmpl_if>

#  Reconstruction of the complete module list from all available modules
#  (static and shared ones) to achieve correct module execution order.
#  [WHENEVER YOU CHANGE THE LOADMODULE SECTION ABOVE UPDATE THIS, TOO]
ClearModuleList
AddModule mod_env.c
AddModule mod_log_config.c
AddModule mod_mime_magic.c
AddModule mod_mime.c
# AddModule mod_negotiation.c
# AddModule mod_status.c
# AddModule mod_include.c
# AddModule mod_autoindex.c
# AddModule mod_dir.c
AddModule mod_cgi.c
# AddModule mod_asis.c
# AddModule mod_imap.c
# AddModule mod_actions.c
# AddModule mod_userdir.c
# AddModule mod_alias.c
# AddModule mod_access.c
# AddModule mod_auth.c
# AddModule mod_proxy.c
AddModule mod_so.c
<tmpl_if EnableSSL>
AddModule mod_rewrite.c
AddModule mod_setenvif.c
AddModule mod_ssl.c
</tmpl_if>
AddModule mod_perl.c

#
# Non mod_perl config
#

# To handle CGI
Options +ExecCGI

PassEnv KRANG_ROOT
PassEnv KRANG_CONF
PassEnv KRANG_DEBUG
PassEnv CGI_MODE
PassEnv PERL5LIB
PassEnv HTML_TEMPLATE_ROOT

#
# MOD_PERL Configuration for Krang
#
PerlPassEnv KRANG_ROOT
PerlPassEnv KRANG_CONF
PerlPassEnv KRANG_DEBUG
PerlPassEnv CGI_MODE
PerlPassEnv PERL5LIB
PerlPassEnv HTML_TEMPLATE_ROOT

PerlSendHeader Off
PerlWarn On
PerlRequire "<tmpl_var KrangRoot>/conf/krang-preload.pl"

<Perl>
        use Krang::Handler;
</Perl>

<FilesMatch "^.*\.cgi$">
        SetHandler cgi-script
        <tmpl_if EnableSSL>SSLOptions  "StdEnvVars"</tmpl_if>
</FilesMatch>

<FilesMatch "^.*\.pl$">
<TMPL_IF CGI_MODE>
        SetHandler cgi-script
        <tmpl_if EnableSSL>SSLOptions  "StdEnvVars"</tmpl_if>
<TMPL_ELSE>
        SetHandler perl-script
        PerlHandler Apache::Registry
</TMPL_IF>
</FilesMatch>


<tmpl_if EnableSSL>
#
#  SSL Global Context
#

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is a internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  <tmpl_var SSLPassPhraseDialog default="builtin">

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism
#   to use and second the expiring timeout (in seconds).
SSLSessionCache         dbm:<tmpl_var KrangRoot>/tmp/ssl_scache
SSLSessionCacheTimeout  <tmpl_var SSLSessionCacheTimeout default="3600">

#   Semaphore:
#   Configure the path to the mutual exclusion semaphore the
#   SSL engine uses internally for inter-process synchronization.
SSLMutex  file:<tmpl_var KrangRoot>/tmp/ssl_mutex

#   Pseudo Random Number Generator (PRNG):
#   Configure one or more sources to seed the PRNG of the
#   SSL library. The seed data should be of good random quality.
#   WARNING! On some platforms /dev/random blocks if not enough entropy
#   is available. This means you then cannot use the /dev/random device
#   because it would lead to very long connection times (as long as
#   it requires to make more entropy available). But usually those
#   platforms additionally provide a /dev/urandom device which doesn't
#   block. So, if available, use this one instead. Read the mod_ssl User
#   Manual for more details.
SSLRandomSeed startup <tmpl_var SSLRandomSeedStartup default="builtin">
SSLRandomSeed connect <tmpl_var SSLRandomSeedConnect default="builtin">

</tmpl_if>


ServerName <tmpl_var HostName>
Listen <tmpl_var ApacheAddr>:<tmpl_var ApachePort>
NameVirtualHost <tmpl_var ApacheAddr>:<tmpl_var ApachePort>
<tmpl_if EnableSSL>
Listen <tmpl_var ApacheAddr>:<tmpl_var SSLApachePort>
NameVirtualHost <tmpl_var ApacheAddr>:<tmpl_var SSLApachePort>
</tmpl_if>




<VirtualHost <tmpl_var ApacheAddr>:<tmpl_var ApachePort>>
   ServerName <tmpl_var HostName>

<tmpl_if EnableSSL>
   # redirect all traffic to the SSL VHost
   RewriteEngine On
   RewriteLogLevel 0
   RewriteLog <tmpl_var KrangRoot>/logs/apache_rewrite_log
   RewriteCond %{SERVER_PORT} !^<tmpl_var SSLApachePort>$
   RewriteRule ^.*$ https://%{SERVER_NAME}:<tmpl_var SSLApachePort>%{REQUEST_URI} [R,L] 

</VirtualHost>

<VirtualHost <tmpl_var ApacheAddr>:<tmpl_var SSLApachePort>>
   ServerName <tmpl_var HostName>
</tmpl_if>
   PerlTransHandler Krang::Handler->trans_handler
   PerlLogHandler    Krang::Handler->log_handler

   <Location />
      PerlSetVar        flavor root
      ErrorDocument 500 /bug.cgi?rm=ise=1
   </Location>

   <tmpl_loop InstanceLoop>
      <Location /<tmpl_var InstanceName>>
         PerlSetVar        flavor root
         PerlSetVar        instance <tmpl_var InstanceName>

         AuthType          Krang::Handler
         AuthName          <tmpl_var InstanceName>
         PerlAccessHandler Krang::Handler->access_handler
         PerlAuthenHandler Krang::Handler->authen_handler
         PerlAuthzHandler  Krang::Handler->authz_handler
         PerlLogHandler    Krang::Handler->log_handler
         PerlCleanupHandler Apache::SizeLimit
         require           valid-user

         ErrorDocument 500 /<tmpl_var InstanceName>/bug.cgi?ise=1
      </Location>
   </tmpl_loop>

   <tmpl_if EnableSSL>

   #  All SSL configuration in this context applies to the virtual hosts
   #
   
   
   #   SSL Engine Switch:
   #   Enable/Disable SSL for this virtual host.
   SSLEngine on
   
   #   Usable SSL protocol flavours
   SSLProtocol <tmpl_var SSLProtocol default="all -SSLv2">
   
   #   Logging:
   #   The home of the dedicated SSL protocol logfile. Errors are
   #   additionally duplicated in the general error log file.  Put
   #   this somewhere where it cannot be used for symlink attacks on
   #   a real server (i.e. somewhere where only root can write).
   #   Log levels are (ascending order: higher ones include lower ones):
   #   none, error, warn, info, trace, debug.
   SSLLog      <tmpl_var KrangRoot>/logs/ssl.log
   SSLLogLevel <tmpl_var SSLLogLevel default="info">
   
   #   SSL Cipher Suite:
   #   List the ciphers that the client is permitted to negotiate.
   #   See the mod_ssl documentation for a complete list.
   SSLCipherSuite <tmpl_var SSLCipherSuite default="ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL">
   
   #   Server Certificate:
   #   Point SSLCertificateFile at a PEM encoded certificate.  If
   #   the certificate is encrypted, then you will be prompted for a
   #   pass phrase.  Note that a kill -HUP will prompt again. A test
   #   certificate can be generated with `make certificate' under
   #   built time. Keep in mind that if you've both a RSA and a DSA
   #   certificate you can configure both in parallel (to also allow
   #   the use of DSA ciphers, etc.)
   SSLCertificateFile <tmpl_var KrangRoot>/conf/ssl.crt/server.crt
   
   #   Server Private Key:
   #   If the key is not combined with the certificate, use this
   #   directive to point at the key file.  Keep in mind that if
   #   you've both a RSA and a DSA private key you can configure
   #   both in parallel (to also allow the use of DSA ciphers, etc.)
   SSLCertificateKeyFile <tmpl_var KrangRoot>/conf/ssl.key/server.key
   
   #   Server Certificate Chain:
   #   Point SSLCertificateChainFile at a file containing the
   #   concatenation of PEM encoded CA certificates which form the
   #   certificate chain for the server certificate. Alternatively
   #   the referenced file can be the same as SSLCertificateFile
   #   when the CA certificates are directly appended to the server
   #   certificate for convinience.
   #SSLCertificateChainFile <tmpl_var KrangRoot>/conf/ssl.crt/ca-bundle.crt
   
   <tmpl_if SSL_VERIFY_CLIENT>
   #
   #   Some MIME-types for downloading Certificates and CRLs
   #
   AddType application/x-x509-ca-cert .crt
   AddType application/x-pkcs7-crl    .crl
   
   #   Certificate Authority (CA):
   #   Set the CA certificate verification path where to find CA
   #   certificates for client authentication or alternatively one
   #   huge file containing all of them (file must be PEM encoded)
   #   Note: Inside SSLCACertificatePath you need hash symlinks
   #         to point to the certificate files. Use the provided
   #         Makefile to update the hash symlinks after changes.
   SSLCACertificatePath <tmpl_var KrangRoot>/conf/ssl.crt
   SSLCACertificateFile <tmpl_var KrangRoot>/conf/ssl.crt/ca_bundle-client.crt
   
   #   Certificate Revocation Lists (CRL):
   #   Set the CA revocation path where to find CA CRLs for client
   #   authentication or alternatively one huge file containing all
   #   of them (file must be PEM encoded)
   #   Note: Inside SSLCARevocationPath you need hash symlinks
   #         to point to the certificate files. Use the provided
   #         Makefile to update the hash symlinks after changes.
   SSLCARevocationPath <tmpl_var KrangRoot>/conf/ssl.crl
   SSLCARevocationFile <tmpl_var KrangRoot>/conf/ssl.crl/ca-bundle-client.crl
   
   #   Client Authentication (Type):
   #   Client certificate verification type and depth.  Types are
   #   none, optional, require and optional_no_ca.  Depth is a
   #   number which specifies how deeply to verify the certificate
   #   issuer chain before deciding the certificate is not valid.
   SSLVerifyClient <tmpl_var SSLVerifyClient default="none">
   SSLVerifyDepth  <tmpl_var SSLVerifyDepth default="1">
   </tmpl_if>
   
   #   SSL Protocol Adjustments:
   #   The safe and default but still SSL/TLS standard compliant shutdown
   #   approach is that mod_ssl sends the close notify alert but doesn't wait for
   #   the close notify alert from client. When you need a different shutdown
   #   approach you can use one of the following variables:
   #   o ssl-unclean-shutdown:
   #     This forces an unclean shutdown when the connection is closed, i.e. no
   #     SSL close notify alert is send or allowed to received.  This violates
   #     the SSL/TLS standard but is needed for some brain-dead browsers. Use
   #     this when you receive I/O errors because of the standard approach where
   #     mod_ssl sends the close notify alert.
   #   o ssl-accurate-shutdown:
   #     This forces an accurate shutdown when the connection is closed, i.e. a
   #     SSL close notify alert is send and mod_ssl waits for the close notify
   #     alert of the client. This is 100% SSL/TLS standard compliant, but in
   #     practice often causes hanging connections with brain-dead browsers. Use
   #     this only for browsers where you know that their SSL implementation
   #     works correctly.
   #   Notice: Most problems of broken clients are also related to the HTTP
   #   keep-alive facility, so you usually additionally want to disable
   #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
   #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
   #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
   #   "force-response-1.0" for this.
   SetEnvIf User-Agent ".*MSIE.*" \
            nokeepalive ssl-unclean-shutdown \
            downgrade-1.0 force-response-1.0


   </tmpl_if>
   
</VirtualHost>

# Use NameVirtuaHosts
<tmpl_loop InstanceLoop>
<VirtualHost <tmpl_var ApacheAddr>:<tmpl_var ApachePort>>
   ServerName      <tmpl_var InstanceHostName>

<tmpl_if EnableSSL>
   # redirect all traffic to the SSL VHost
   RewriteEngine On
   RewriteLogLevel 0
   RewriteLog <tmpl_var KrangRoot>/logs/apache_rewrite_log
   RewriteCond %{SERVER_PORT} !^<tmpl_var SSLApachePort>$
   RewriteRule ^.*$ https://%{SERVER_NAME}:<tmpl_var SSLApachePort>%{REQUEST_URI} [R,L] 

</VirtualHost>

<VirtualHost <tmpl_var ApacheAddr>:<tmpl_var SSLApachePort>>
   ServerName <tmpl_var InstanceHostName>
</tmpl_if>

   PerlTransHandler Krang::Handler->trans_handler
   PerlLogHandler   Krang::Handler->log_handler

   <Location />
       PerlSetVar      flavor instance   
       PerlSetVar      instance <tmpl_var InstanceName>

       AuthType Krang::Handler
       AuthName <tmpl_var InstanceName>
       PerlAccessHandler Krang::Handler->access_handler
       PerlAuthenHandler Krang::Handler->authen_handler
       PerlAuthzHandler  Krang::Handler->authz_handler
       PerlLogHandler    Krang::Handler->log_handler
       PerlCleanupHandler Apache::SizeLimit
       require valid-user

       ErrorDocument 500 /bug.cgi?ise=1
   </Location>

</VirtualHost>
</tmpl_loop>
  
