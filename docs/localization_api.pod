=head1 Localization API - A note for Krang developers

This document describes how to make use of Krang's localization API.

=head2 Overview

Krang's localization API includes four parts:

=over 4

=item *

Localization of static template strings via special <tmpl_lang SomeString> tags

=item *

Localization of JavaScript alert() , confirm() and prompt() arguments via the JavaScript method Krang.L10N.loc()

=item *

Localization of L<Krang::Message> messages and alerts via language-specific messages.conf files

=item *

Localization of Perl strings via the function localize() exported by L<Krang::Localization>

=back

The remainder of this document will detail these four parts.

The lexicon files for one language reside below C<lang/LANG/> where
LANG has to be a RFC3066-style language tag.

=head2 Static template strings

Each static string in Krang's templates must be wrapped in
tmpl_lang tags. Example:

  <tmpl_lang Edit Story>

This not only pertains to HTML text fragments, but also to the value
property of buttons. To take an example:

  <input value="<tmpl_lang Cancel>" onclick="cancel_edit()" type="button"> 

To figure out what to wrap in tmpl_lang tags, just take the viewpoint
of someone looking at the UI: Which strings does he see, and which of
them are statically coded in the template.  Those strings have to be
wrapped.

One more note: Don't split strings using tmpl_if & Co., and don't wrap
the splitted string parts separately. Other languages might require to
reverse the order of the splitted string parts or express them in
wholly different ways.  This is best explained using an example,
coming from C<templates/User/edit_view.tmpl>:

  <h2>
  <tmpl_if add_mode>
    New
  <tmpl_else>
    Edit
  </tmpl_if>
  User
  </h2>

Depending on the tmpl_if, this results in "New User" or "Edit User". A
naive way of adding tmpl_lang tags, then, would be to wrap all three
strings separately:

  <h2>
  <tmpl_if add_mode>
    <tmpl_lang New>
  <tmpl_else>
    <tmpl_lang Edit>
  </tmpl_if>
  <tmpl_lang User>
  </h2>

Other languages, however, might reverse the order, saying "User New"
and "User Edit" respectively.  To make this possible, we have to wrap
the whole expression, including "User" into each of the tmpl_langs:

  <h2>
  <tmpl_if add_mode>
    <tmpl_lang New User>
  <tmpl_else>
    <tmpl_lang Edit User>
  </tmpl_if>
  </h2>

As a positive side-effect, this is also slightly more readable then
the piecemeal version above.

The same logic applies when it comes to the interplay of tmpl_lang and
tmpl_var tags.  Consider the following example:

  # in Krang::CGI::ElementEditor we had
  $template->param(name_of_this_element => $element->display_name);

  # and in templates/Story/edit.tmpl
  <input value="Done Editing <tmpl_var name_of_this_element>" onclick="save_and_go_up()" type="button" class="west">

The button label, then, is built from the static template string "Done
Editing " and the element name provided by the tmpl_var.  Again, other
languages might require to reverse the wording.  That's why it is
necessary to put things in the following way:

  # in Krang::CGI::ElementEditor
  $template->param(done_with_this_element => localize('Done With '.$element->display_name));

  # and in templates/Story/edit.base.tmpl
  <input value="<tmpl_var done_with_this_element>" onclick="save_and_go_up()" type="button" class="west">


=head2 JavaScript strings

Strings passed to the JavaScript functions alert() , confirm() and
prompt() must first be passed to Krang.L10N.loc().  Example:

  confirm( Krang.L10N.loc('Are you SURE you want to delete these Categories?') ) 

Again tmpl_if & Co. should not interfer (see above "Static template strings")

=head2 Messages and alerts managed by L<Krang::Message>

You need not care about these messages and alerts, because their
localization happens behind the scenes in L<Krang::Message>.

=head2 Perl strings in Krang::* modules

This one is getting a bit more complicated. Here we are dealing with
strings passed into the UI via tmpl_var's.  Those strings are
localized using the function localize() exported by
L<Krang::Localization>.  Not all Perl strings however have to be
passed through localize() and there's no general rule B<where> to use
localize().

Usually you want to use it in Krang's presentation layer classes
Krang::CGI::*. In listings runmodes for instance, this pertains to the
value property of buttons generated by row handlers.  Dynamically
generated labels of drop down menus, radiobuttons and the like are
candidates for such localizations.

Care was taken, however, to do the localization as early as possible,
high up in the inheritance (is-a) or usage (has-a) chain.  The column
labels on list screens for example are localized in
L<Krang::HTMLPager>, so you don't have to localize() them in
Krang::CGI::*.  Likewise the display_name property of element classes
get localized in L<Krang::ElementClass>.  The labels property of
certain element classes like L<Krang::ElementClass::RadioGroup> are
localized therein.  See below B<Multi-lingual display names and labels
in element libraries>.

=head2 Multi-lingual display names and labels in element libraries

There may be times you are designing an element library for a customer
whose editors like to see Krang elements' display names and labels
in their respective languages.  As mentioned above, you don't have to
pass these element class properties through localize() when writing
your element libraries.  What you have to do however is adding your
own lexicon(s) containing translations for those display names and
labels.  Again, this is best explained using an example.

Say you have an addon named InterEditors containing an element
library named InterEditors as well, and your customer desires a French
and a German localization.  In this case you need to add two
dictionary files containing the corresponding translations:

  addons/InterEditors/lang/de/perl.dict
  addons/InterEditors/lang/fr/perl.dict

L<Krang::Localization> will use those perl.dict's provided you added
'de' and 'fr' to the list of AvailableLanguages in C<conf/krang.conf>.
