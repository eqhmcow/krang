package Krang::Publisher;
use strict;
use warnings;

=head1 NAME

Krang::Publisher - Center of the Publishing Universe.

=head1 SYNOPSIS

  use Krang::Publisher;

  my $publisher = new Krang::Publisher
                  (
                   preview_path => "/mnt/www/preview",
                   publish_path => "/mnt/www/publish"
                  );


  # Outputs a story in the previously-set preview path,
  # returns preview URL.
  my $url = $publisher->preview(
                                story    => $story_object,
                                category => $category_object
                               );


  # Outputs a story in the previously-set publish path.
  $publisher->publish(
                      story    => $story_object,
                      user     => $user_object
                     );


  # Build the HTML pages for a Story.
  my @pages = $publisher->assemble_pages(
                                         story    => $story_object,
                                         category => $category_object
                                        );


  # Publish a media object to the preview path.
  # Returns the media URL if successful.
  $url = $publisher->preview_media(
                                   media    => $media_object,
                                   category => $category_object,
                                  );

  # Publish a media object to the preview path.
  # Returns the media URL if successful.
  $url = $publisher->publish_media(
                                   media    => $media_object,
                                   category => $category_object,
                                   user     => $user_object
                                  );


  # Returns the mark used internally to break content into pages.
  my $break_txt = $publisher->PAGE_BREAK();



=head1 DESCRIPTION

Krang::Publisher is responsible for coordinating the various components that make up a Story (Elements, Media, Categories), and putting them all together, out on the filesystem, for the world + dog to see.  The publish process will result in either 'preview' or 'publish' output - content-wise, they are indistinguishable.

In both the preview and publish process, stories are checked for related media (see Krang::Story::linked_media()).  Media objects will be copied into the proper output directory as part of the build process.

In the publish (but not preview) process, stories will also be checked for linked stories (see Krang::Story::linked_stories()).  Any linked-to stories will be checked for publish status, and will be published if they are marked as unpublished.


=head1 INTERFACE

=head2 Attributes

=over

=item C< preview_path >

Apache's doc_root for the preview website.

=item C< publish_path >

Apache's doc_root for the publish website.

=back

=cut

=head2 Methods

=over

=item C<< $publisher = Krang::Publisher->new(preview_path => "/www/preview", publish_path => "/www/publish"); >>

Creates a new publisher object.  The C<preview_path> and C<publish_path> attributes are required.


=item C<< $url = $publisher->preview(story => $story, category => $category) >> 

Generates a story on the filesystem in the preview_path.  Returns a URL to the story if successful, or will throw one of several potential Exceptions (potential issues: filesystem problems, exceptions thrown by other objects, anything else?) in the event something goes wrong.

category is an optional attribute.  By default, preview() will build a story based on the default category for the Story, otherwise it will preview the story in the supplied category.

As part of the preview process, preview() will call $story->linked_media, and publish the related media that returns to the appropriate paths in the preview docroot using preview_media() or publish_media().

=item C<< $publisher->publish(story => $story, user => $user) >>

Publishes a story to the live webserver document root, as set by publish_path.

When a story is published, it is published under all categories it is associated with (see L<Krang::Story::categories>).

As part of the publish process, all media and stories linked to by $story will be published as well.

Will throw an exception if the user does not have permissions to publish.

=item C<< @pages = $publisher->assemble_pages(story => $story, category => $category) >>

assemble_pages() is used internally by both publish() and preview() to mate the HTML generated by both the story and the category element trees.

Attributes story and category are required.

Does not throw any exceptions of its own.


=item C<< $url = $publisher->preview_media(media => $media, category => $category) >>

Copies a media file out to the webserver doc root for the preview website.

Attributes media and category are required.

Returns a url to the media file on the preview website if successful.

Will throw an exception if there are problems with the copy.


=item C<< $url = $publisher->publish_media(media => $media, category => $category) >>

Copies a media file out to the webserver doc root for the publish website.

Attributes media and category are required.

Returns a url to the media file on the publish website if successful.

Will throw an exception if there are problems with the copy.


=item C<< PAGE_BREAK() >>

Returns the tag used internally to mark the break between pages in a story.  When a multi-page story is assembled by the Krang::ElementClass element tree, it consists of a scaler containing these break tags.  The preview/publish process will split the scaler along those tags to create the individual pages of the story.

No exceptions to throw.

=back

=cut

=head1 TODO

Write out Krang::ElementClass POD and see if this still looks kosher.

Do alternate forms of output concern Krang::Publisher?  I assume any other form of output will be happen via the SOAP interface.

Write out all the methods for the POD listed here.

=head1 SEE ALSO

L<Krang::ElementClass>, L<Krang::Category>, L<Krang::Media>

=cut

