#!/usr/bin/perl

use strict;
use warnings;

=head1 NAME

krang_template_diff - describe differences between template datasets

=head1 SYNOPSIS

Produce a diff of all changes from Krang dataset 1 to Krang dataset 2:

  $ krang_template_diff templates1.kds templates2.kds > diff.txt

Same thing, ignoring changes in whitespace

  $ krang_template_diff --diff-options -urbB --template_id 5 \
    templates1.kds templates2.kds > diff.txt

=head1 OPTIONS

krang_template_diff [options] from.kds to.kds

Arguments:

  from         	    - Krang template dataset file from which comparisons
		      are made

  to                - Krang template dataset for which additions will be
		      generated

Options:

  --diff-options    - options to pass to diff, defaults to "-ur".  Note
                      that bric_template_patch requires '-ur' and won't
                      work with '-N'.

  --help            - shows this screen

  --man             - shows the full documentation

  --verbose         - print a running dialogue of operations.  Repeat
                      up to three times of successively larger amounts
                      of debugging information.

=head1 DESCRIPTION

This program produces a standard diff file describing the differences
between the templates on two Bricolage servers.  This file may be used
with C<bric_template_patch> to effect the changes described in the
diff.

=head1 CAVEATS

=over 4

=item *

This program requires GNU C<diff> to be installed and in your path.

=back

=cut

use Config;
use Cwd qw(cwd);
use File::Path qw(mkpath);
use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use File::Temp qw(tempdir);
use FindBin qw($RealBin);
use Getopt::Long;
use Pod::Usage;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Krang::Conf (don't need to load Krang here because we won't
    # be slinging elements)
    $ENV{KRANG_NO_ELEMENTLIBS} = 1;
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END

    # get parameters from command line.  do this during compile so
    # $VERBOSE can effect use options and such.  also so errors get
    # detected as quick as possible - people are waiting out there!
    our ($from, $to);
    our $VERBOSE = 0;
    our ($help, $man);
    our $template_id;
    our $diff_options = '-ur';
    GetOptions(
        "help"           => \$help,
        "man"            => \$man,
        "verbose+"       => \$VERBOSE,
        "template_id=s"  => \$template_id,
        "diff-options=s" => \$diff_options,
    ) or pod2usage(2);

    pod2usage(1) if $help;
    pod2usage(-verbose => 2) if $man;

    # get from and tos
    $from = shift @ARGV;
    pod2usage("Missing required 'from' and 'to' datasets")
      unless defined $from;
    $to = shift @ARGV;
    pod2usage("Missing required 'to' dataset")
      unless $to;
}

our $VERBOSE;

require Data::Dumper if $VERBOSE;
use Krang::ClassFactory qw(pkg);
use IPC::Run qw(run);
use XML::Simple qw(XMLin);

main();

# main is where it's at
sub main {
    our ($from, $to);

    my $root = catdir($ENV{KRANG_ROOT}, 'tmp');
    my $temp = tempdir(DIR => $root, CLEANUP => 1);

    # extract .kds's
    my ($from_dir, $to_dir) = map { catdir($temp, $_) } qw/from to/;
    extract($from_dir, $from);
    extract($to_dir,   $to);

    # rewrite out 'content' for each template to 'filename'
    write_out($from_dir);
    write_out($to_dir);

    # make'um diff'um
    make_diff($temp);

    exit 0;
}

# make a diff of the templates
sub make_diff {
    my $dir = shift;
    our $diff_options;

    my $old_dir = cwd;
    chdir($dir) or die "Can't change to $dir: $!";

    my $cmd = "diff $diff_options from to |";
    print STDERR "Running '$cmd' in $dir.\n"
      if $VERBOSE;
    open(DIFF, $cmd)
      or die "Unable to start diff: $!";
    while (<DIFF>) {
        print;
    }
    close DIFF;

    # gotta get back
    chdir($old_dir) or die "Can't get back to $old_dir: $!";
}

sub extract {
    my ($dir, $kds) = @_;
    my ($in, $out, $err);

    mkpath([$dir]) unless -d $dir;

    my @cmd = ("tar", "-C" => $dir, "-xf" => $kds, "template_*.xml");
    run(\@cmd, \$in, \$out, \$err)
      or die("Unable to extract '$kds' to '$dir': $!");

    # DEBUG
    print STDERR "Extracted '$kds' to '$dir'\n" if $VERBOSE;
}

sub write_out {
    my ($dir) = @_;
    my @files;

    opendir(DIR, $dir);
    @files = grep /\.xml$/, readdir DIR;
    closedir(DIR);

    for (@files) {
        my $fpath = catfile($dir, $_);
        my $xml   = XMLin($fpath);
        my $npath = catfile($dir, $xml->{filename});
        my $data  = $xml->{content} || '';

        # DEBUG
        print STDERR "Writing to '$npath'\n" if $VERBOSE;

        open(TEMPLATE, ">$npath") or die "Unable to open $npath : $!";
        print TEMPLATE $data;
        close TEMPLATE or die $!;

        unlink $fpath;

        # DEBUG
        print STDERR "Removed '$fpath'\n" if $VERBOSE;
    }
}
