#!/usr/bin/perl -w
use strict;
use warnings;

=pod

=head1 NAME

krang_test - run tests on Krang

=head1 SYNOPSIS

Run all tests:

  $ krang_test

Run just one test file:

  krang_test --files=t/foo.t

Make it verbose:

  krang_test --files=t/foo.t --verbose

You can also call this script through the Makefile:

  make test TEST_FILES=t/foo.t TEST_VERBOSE=1

=head1 DESCRIPTION

Runs tests on Krang.

=head1 OPTIONS

=over 4

=item --files

Which files to run tests on.  May be a space-separated list of files
("t/foo.t t/bar.t") and may use globbing ("t/*.t").

=item --verbose

Prints a running dialog of what's happening.

=item --tap-archive

Create an archive file of the test run's TAP output instead of the
normal L<Test::Harness> summary. Useful when you want to process the
resulting test run or feed it to smolder. The resulting file is named
F<krang_test_run.tar.gz>.

=item --help

=item --man

=back

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" : 
      "${lib}";
    unshift @INC, $lib, "$lib/".$Config{archname};

    # load Krang::Conf (don't need to load Krang here because we won't
    # be slinging elements)
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

# process options
use Krang::ClassFactory qw(pkg);
use Getopt::Long;
use Pod::Usage;
use Krang::ClassLoader 'lib';
use Krang::ClassLoader 'File';
use Krang::ClassLoader 'Conf';
use TAP::Harness;

our ($help, $man, $archive);
my $v = 0;
my $files;
pod2usage(2) unless
  GetOptions(help          => \$help,
             man           => \$man,
             'verbose'     => \$v,
             'verbose-i=i' => \$v,
             'tap-archive' => \$archive,
             'files=s'     => \$files,
            );
pod2usage(1)             if $help;
pod2usage(-verbose => 2) if $man;

my $root = pkg('Conf')->get('KrangRoot');
$files ||= join(" ", map { s!^$root/!!; $_ } 
                     map { "$_/*.t" } 
                     grep { -d $_ } pkg('File')->find_all('t'));
print "FILES: $files\n";
$files = [ glob($files) ];

# choose the first instance if KRANG_INSTANCE not set
unless ($ENV{KRANG_INSTANCE}) {
    $ENV{KRANG_INSTANCE} = (pkg('Conf')->instances())[0];
}

my $harness;
if( $archive ) {
    require TAP::Harness::Archive;
    $harness = TAP::Harness::Archive->new({
        archive => 'krang_test_run.tar.gz',
        verbose => $v,
        merge   => 1, 
    });
} else {
    $harness = TAP::Harness->new({
        verbose => $v,
        merge   => 1, 
    });
}
$harness->runtests(@$files);
