#!/usr/bin/env perl
use warnings;
use strict;
use 5.006;

=pod

=head1 NAME

krang_build - build a Krang binary distribution from source

=head1 SYNOPSIS

To automatically determine the platform:

  krang_build

Or specify it explicitely:

  krang_build [platform]

=head1 DESCRIPTION

This script builds Krang from source for the specified platform.  In
most cases you must be running the platform for which you're building
(i.e. no cross-compilation).

Available platforms are the set of directories in F<platform/>.

=head1 OPTIONS

The script takes the following options:

=over

=item --no-apache

By default the script will build apache and mod_perl for you.  This
option skips that step.

=item --with-ssl

Give this option if you desire to build Apache with SSL.
During the build, dummy (Snakeoil) RSA certificates will be created and 
copied to the cert and key files that Krang is expecting (as long as 
certs/keys don't exist). Later when running krang, you should replace 
these with a real cert and key from a trusted CA.

    KRANG_ROOT/conf/ssl.crt/server.crt
    KRANG_ROOT/conf/ssl.key/server.key 

=item --with-openssl=/path/to/your/openssl

For most distros the Apache default should work.  If you experience
problems building Apache with SSL support, you may give it the right
path to your OpenSSL install directory.

=item --module

Specify a specific CPAN module to build.  The string you provide will
be checked as a substring against the distribution file names, so
C<DBD-mysql> works, but C<DBD::mysql> does not.  You can specify this
option multiple times to build a specific set of modules.

=item --skip-module

Same as C<module> above, but skips the specified modules and builds
everything else.  The C<module> and C<skip-module> options are not
intended to be used together.

=item --no-modules

Similar to C<skip-module> except that you don't have to specify the modules
to skip as all of them will be skipped. This cannot be using in conjunction
with C<module>.

=item --rebuild

Build even if there is already an existing Krang build in this location.
This is useful for installing a new module into an existing build when
an add-on requires it.

=item --help

=item --man

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    unless ($ENV{KRANG_ROOT}) {
        my @dir = splitdir(canonpath($RealBin));
        $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);
    }

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # add in $KRANG_ROOT/platform for platform build modules
    my $plib = catdir($ENV{KRANG_ROOT}, "platform");
    $ENV{PERL5LIB} = "$ENV{PERL5LIB}:${plib}";
    unshift @INC, $plib;
}
use Pod::Usage;
use Getopt::Long;
use File::Temp qw(tempdir);
use File::Copy qw(copy);

# setup path variables
my $KrangRoot       = $ENV{KRANG_ROOT};
my $src_dir         = catdir($ENV{KRANG_ROOT}, 'src');
my $dest_dir        = catdir($ENV{KRANG_ROOT}, 'lib');
my $apache_dest_dir = catdir($ENV{KRANG_ROOT}, 'apache');
my $build_dir       = tempdir(DIR => catdir($ENV{KRANG_ROOT}, 'tmp'));

# a few useful constants
my $apache_dir = opendir(my $APACHE_DIR, catdir($KrangRoot, 'src', 'Apache-MOD_PERL'));
my @apache_pkg = grep { /^apache|^mm|^mod_/ } readdir($APACHE_DIR);
my $APACHE   = catfile('Apache-MOD_PERL', (grep { /apache/ } @apache_pkg)[0]);
my $MOD_PERL = catfile('Apache-MOD_PERL', (grep { /mod_perl/ } @apache_pkg)[0]);
my $MOD_SSL  = catfile('Apache-MOD_PERL', (grep { /mod_ssl/ } @apache_pkg)[0]);
my $MM       = catfile('Apache-MOD_PERL', (grep { /mm/ } @apache_pkg)[0]);
my $MM_BIN = catfile($KrangRoot, 'apache', 'mm');
my $LIBAPREQ = 'libapreq';

# options
my $skip_apache      = 0;
my $skip_all_modules = 0;
my $with_ssl         = 0;
my $ssl_base         = '';
my (@modules, @skip_modules, $rebuild, $help, $man);
GetOptions(
    'no-apache'      => \$skip_apache,
    'with-ssl'       => \$with_ssl,
    'with-openssl=s' => \$ssl_base,
    'module=s'       => \@modules,
    'skip-module=s'  => \@skip_modules,
    'no-modules'     => \$skip_all_modules,
    'rebuild'        => \$rebuild,
    'help'           => \$help,
    'man'            => \$man,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

# set env for Apache build with SSL
$ENV{LD_LIBRARY_PATH} = catdir($MM_BIN, 'lib');
$ENV{SSL_BASE} = $ssl_base;

# reset a couple of ExtUtils::MakeMaker env vars
$ENV{PERL_MM_OPT}         = '';
$ENV{PERL_MM_USE_DEFAULT} = '';
$ENV{PERL_CORE}           = '';

# rest a couple of Module::Build env vars
$ENV{MODULEBUILDRC} = '';
$ENV{PERL_MB_OPT}   = '';

# get platform arg
pod2usage("Wrong number of arguments.\n") if @ARGV > 1;
my $platform;
opendir(DIR, catdir($KrangRoot, 'platform')) or die $!;
my @platforms;
while (my $f = readdir DIR) {
    push @platforms, $f if (-e catfile($KrangRoot, 'platform', $f, 'Platform.pm'));
}

#my @platforms = grep { $_ !~ /^\.\.?$/ and $_ !~ /CVS/ } sort readdir DIR;

# do we just want to rebuild some modules
if (!$skip_all_modules && @modules) {
    $rebuild     = 1;
    $skip_apache = 1;
    my %modules = map { $_ => 1 } @modules;
    foreach my $required qw(Expect IO-Tty) {
        push @modules, $required unless $modules{$required};
    }
}

# check that we're not trying to build on top of an existing build
die "A build of Krang already exists here.  Run 'make clean' to remove it"
  . "\nbefore trying again or run with the --rebuild option.\n"
  if -e catfile($KrangRoot, 'data', 'build.db')
      and !$rebuild;

if (@ARGV) {
    $platform = shift;

    # check for bad platform
    unless (-d catdir($KrangRoot, 'platform', $platform)) {
        die "Platform '$platform' is not supported.  "
          . "Available platforms are:\n\n\t"
          . join("\n\t", @platforms) . "\n\n";
    }
} else {

    # look for a platform that wants to handle this
    my $found;
    foreach my $plat (@platforms) {
        print "ATTEMPTING: $plat\n";
        my $pkg = $plat . '::Platform';
        eval "use $pkg";
        die "Unable to load platform modules '$pkg': $@\n" if $@;

        if ($pkg->guess_platform) {
            $found    = 1;
            $platform = $plat;
            print "Building for platform '$plat'.\n";
            last;
        }
    }
    die "Unable to automatically determine your platform, you must\n"
      . "provide one on the command line.  Available platforms are:\n\n\t"
      . join("\n\t", @platforms) . "\n\n"
      unless $found;
}

# load the platform build module, reference via $pkg
my $pkg = $platform . '::Platform';
eval "use $pkg";
die "Unable to load platform modules '$pkg': $@\n" if $@;

# verify the platform
$pkg->verify_dependencies(mode => 'build');

# if we have rebuild and we were previously built with-ssl, then
# the rebuild should be with-ssl too
if ($rebuild) {
    my %build_params = $pkg->build_params;
    $with_ssl = 1 if $build_params{SSL};
}

# get list of files to build, considering --module, --skip-module and --no-module opts
opendir(SRC, $src_dir) or die "Can't open $src_dir for reading: $!";
my @files;
unless ($skip_all_modules) {
    @files = sort readdir(SRC);

    if (@modules) {
        @files = grep { contains(\@modules, $_) } @files;
    } elsif (@skip_modules) {
        @files = grep { !contains(\@skip_modules, $_) } @files;
    }

    # shuffle some to the back to get proper build order
    foreach my $distribution qw(DBD-mysql Image-BioChrome Linux-Pid) {
        my ($file) = grep(/$distribution/, @files);
        @files = grep(!/$distribution/, @files);
        push @files, $file if $file;
    }

    # shuffle Expect, IO-Tty, Test-Harness and Test-Simple to the front
    # since they're needed by later build steps
    foreach my $distribution
      qw(Test-Harness Test-Simple ExtUtils-CBuilder Module-Build Expect IO-Tty) {
        my ($file) = grep(/$distribution/, @files);
        @files = grep(!/$distribution/, @files);
        unshift @files, $file if $file;
    }

    # loop through files, unpacking and calling build_perl_module()
    foreach my $file (@files) {
        next unless $file =~ /gz$/;

        # wait to build libapreq till after building Apache
        next if $file =~ /^$LIBAPREQ/o;

        build_module($file);
    }
}

# build Apache/mod_perl
unless ($skip_apache) {
    chdir $build_dir or die "Unable to chdir($build_dir): $!";

    my $mod_ssl_params = '';    # pass to Apache build
    my $apache_dir     = '';

    if ($with_ssl) {

        # build mm
        my $mm_gz = catfile($src_dir, $MM);
        system("tar zxf $mm_gz") == 0 or die "Couldn't unpack file: $!";
        my ($mm_dir) = $mm_gz =~ m!/([^/]+)\.tar\.gz$!;
        die "Can't find mm dir '$mm_dir'." unless -d $mm_dir;

        $pkg->build_mm(
            mm_dir => $mm_dir,
            mm_bin => $MM_BIN
        );

        # build mod_ssl
        my $mod_ssl_gz = catfile($src_dir, $MOD_SSL);
        system("tar zxf $mod_ssl_gz") == 0 or die "Couldn't unpack file: $!";
        my ($mod_ssl_dir) = $mod_ssl_gz =~ m!/([^/]+)\.tar\.gz$!;
        die "Can't find mod_ssl dir '$mod_ssl_dir'." unless -d $mod_ssl_dir;

        # we need the apache src tree
        my $apache_gz = catfile($src_dir, $APACHE);
        system("tar zxf $apache_gz") == 0 or die "Couldn't unpack file: $?";
        ($apache_dir) = $apache_gz =~ m!/([^/]+)\.tar\.gz$!;
        die "Can't find Apache dir '$apache_dir'." unless -d $apache_dir;

        $pkg->build_mod_ssl(
            build_dir   => $build_dir,
            mod_ssl_dir => $mod_ssl_dir,
            apache_dir  => $apache_dir
        );

        # pass to apache build
        $mod_ssl_params =
            "--enable-module=ssl       --enable-shared=ssl "
          . "--disable-rule=SSL_COMPAT --enable-rule=SSL_SDBM "
          . "--enable-module=setenvif  --enable-shared=setenvif";
    }

    unless ($apache_dir) {
        my $apache_gz = catfile($src_dir, $APACHE);
        ($apache_dir) = $apache_gz =~ m!/([^/]+)\.tar\.gz$!;
        system("tar zxf $apache_gz") == 0 or die "Couldn't unpack file: $?";
        die "Can't find Apache dir '$apache_dir'." unless -d $apache_dir;
    }

    my $mod_perl_gz = catfile($src_dir, $MOD_PERL);
    system("tar zxf $mod_perl_gz") == 0 or die "Couldn't unpack file: $?";
    my ($mod_perl_dir) = $mod_perl_gz =~ m!/([^/]+)\.tar\.gz$!;
    die "Can't find Mod_perl dir '$mod_perl_dir'." unless -d $mod_perl_dir;

    $pkg->build_apache_modperl(
        apache_dir     => $apache_dir,
        mod_perl_dir   => $mod_perl_dir,
        mod_ssl_params => $mod_ssl_params
    );

    # move SSL dirs from KrangRoot/apache/conf/ to KrangRoot/conf/
    move_ssl_dirs();
}

# build libapreq now that mod_perl is in place
if (my ($libapreq) = grep /^$LIBAPREQ/, @files) {
    build_module($libapreq);
}

# drop a build.db file describing the build, used by krang_makedist
# and krang_install
print "Writing data/build.db\n";
open(DB, '>', catfile($ENV{KRANG_ROOT}, 'data', 'build.db'))
  or die "Unable to open 'data/build.db': $!";
print DB "Platform $platform\n";
print DB sprintf "Perl \"%d.%d.%d\"\n", (map { ord($_) } split("", $^V, 3));
print DB "Arch \"$Config{archname}\"\n";
print DB "SSL 1\n" if $with_ssl;
close DB;

# all done, cleanup build dir
print "Cleaning temporary build directory.\n";
system("rm -rf $build_dir");

print "\n\nBuild complete!\n";

#
# Subroutines
#

# unpack a distribution and use the platform module to build it
sub build_module {
    my $file = shift;

    # unpack distribution
    my $dist_file = catfile($src_dir, $file);
    print "Unpacking $dist_file...\n";
    chdir $build_dir                  or die "Unable to chdir($build_dir): $!";
    system("tar zxf $dist_file") == 0 or die "Couldn't unpack file: $?";

    $dist_file =~ m!([^/]+)\.(tar\.|t)gz!;
    my $dist_dir = $1;
    die "Can't determine dist_dir for '$dist_file'." unless $dist_dir;
    chdir $dist_dir or die "Unable to chdir($dist_dir): $!";

    eval { $pkg->build_perl_module(name => $dist_dir); };
    die "Problem building $dist_dir in $build_dir:\n\n$@\n"
      if $@;

    # clean up dist dir
    system("rm -rf $dist_dir") == 0 or die "Error cleaning $dist_dir: $?";
}

# returns true if list contains a string which contains the target string
sub contains {
    my ($list, $string) = @_;
    return grep { index($string, $_) > -1 } @{$list};
}

sub move_ssl_dirs {
    my @ssl_dirs = qw(ssl.crl ssl.crt ssl.csr ssl.key ssl.prm);

    my $apache_conf_dir = catdir($KrangRoot, 'apache', 'conf');
    my $krang_conf_dir = catdir($KrangRoot, 'conf');

    for my $ssldir (@ssl_dirs) {
        my $ap_dir = catdir($apache_conf_dir, $ssldir);
        my $kdir   = catdir($krang_conf_dir,  $ssldir);

        warn "Apache SSL dir '$ap_dir' does not exist", next
          unless -d $ap_dir;

        rename $ap_dir => $kdir
          or warn "Can't move '$ap_dir' to '$kdir': $!";
    }

    # now make certs we need to work, if real certs aren't already there
    my $crt       = catfile($KrangRoot, 'conf', 'ssl.crt', 'server.crt');
    my $dummy_crt = catfile($KrangRoot, 'conf', 'ssl.crt', 'snakeoil-rsa.crt');
    my $key       = catfile($KrangRoot, 'conf', 'ssl.key', 'server.key');
    my $dummy_key = catfile($KrangRoot, 'conf', 'ssl.key', 'snakeoil-rsa.key');

    my $ok_to_replace = 0;
    if (!-e $crt) {
        $ok_to_replace = 1;
    } else {
        my $contents = `cat $crt`;
        if ($contents =~ /THIS FILE HAS TO BE REPLACED BY A REAL SERVER CERTIFICATE/) {
            $ok_to_replace = 1;
            unlink($crt) or warn "Could not remove placeholder crt: $!";
        }
    }
    if ($ok_to_replace) {
        copy($dummy_crt, $crt) or warn "Can't copy '$dummy_crt' to '$crt': $!";
    }

    $ok_to_replace = 0;
    if (!-e $key) {
        $ok_to_replace = 1;
    } else {
        my $contents = `cat $key`;
        if ($contents =~ /THIS FILE HAS TO BE REPLACED BY A REAL SERVER PRIVATE KEY/) {
            $ok_to_replace = 1;
            unlink($key) or warn "Could not remove placeholder key: $!";
        }
    }

    if ($ok_to_replace) {
        copy($dummy_key, $key) or warn "Can't copy '$dummy_key' to '$key': $!";
    }
}
