#!/usr/bin/perl -w
use warnings;
use strict;
use File::Find;
use IO::Socket;

# Path to pre-req binaries, filled in by Krang::Platform->find_bin later
our $MYSQL_BIN;
our $PERL_BIN = $^X;
our $COPY_BIN;
our $CHOWN_BIN;
our $CHMOD_BIN;
our $XARGS_BIN;
our $FIND_BIN;
our $MAKE_BIN;
our $ECHO_BIN;
our $TAR_BIN;
our $LN_BIN;

$|++;

=head1 NAME

krang_install - install Krang from a dist file


=head1 SYNOPSIS

  $ krang_install


=head1 DESCRIPTION

This script will install Krang on a RedHat 7.3 or Redhat 9
(i686-linux) system from a dist file created by krang_makedist.

It can also install Krang from a backup file created by krang_backup.
For more on this topic, see C<docs/ops_backup.pod>.


=head2 What C<krang_install> does

Following is a list of the tasks the installer script will perform.


=over 4

=item Check pre-requisites


=over 4

=item Must be running as root.

=item IP address must be configured on host.

=item InstanceElementSet must exist

=item Check for proper version of MySQL.


=item MySQLRootPassword must be valid for this box


=item Check for proper version of Perl.


=item InstallPath must NOT exist.

=item Start-up (init.d) script must NOT exist.

=back



=item Create Krang UNIX user and/or group


=over 4

=item Create with no password (unless user already exists).

=item Use C<useradd>, C<groupadd>, and C<usermod> to manage user account.

=back



=item Install Krang

=item Configure Krang and first instance.

=item Add Krang to init.d startup scripts.

=item Start Krang

=item Make test

=item Output settings and URL of Krang installation to console.



=back




=head1 OPTIONS

 Required parameters:
  --HostName                - Host name used for CMS
  --IPAddress               - IP address used for HTTP and FTP
  --AdminPassword           - For CMS "admin" user
  --DBUser                  - MySQL user used by CMS
  --DBPass                  - MySQL user password used by CMS
  --InstanceHostName        - Host name of CMS instance virtual server
  --InstanceDBName          - Name of MySQL database

 Optional parameters:
  --InstanceElementSet      - Name of element set used by CMS instance, defaults to 'Default'
  --FTPHostName             - Host name for FTP server, defaults to HostName.
  --MySQLRootPassword       - Password for the MySQL user "root"
  --DBHost                  - Host name for MySQL
  --DBSock                  - Socket file for local MySQL server
  --InstallPath             - Directory for Krang install
  --KrangUser               - UNIX user for process ownership
  --KrangGroup              - UNIX group for process ownership
  --FTPPort                 - Port for FTP server, 21 by default. 
  --ApachePort              - Port on which CMS HTTP server should run
  --SMTPServer              - Address of SMTP mail server 
  --InstanceDisplayName     - Name of the Instance for UI display
  --FromBackup              - the name of a backup file to restore from.
  --WithAddon               - Installs Krang with an addon.  May be repeated.
  --EnableSSL               - Turn on SSL support (default: off)
  --SSLApachePort           - SSL port used HTTPS on main Apache server (default 443)
  --Charset                 - The character set to use. Defaults to UTF-8.
  --run-tests               - run Krang "make test", defaults off
  --help                    - Show usage
  --man                     - Show full man page

=head1 SEE ALSO

Refer to F<docs/ops_install.pod>.

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;
use Cwd qw(getcwd chdir);

# Set up KRANG_ROOT and PERL5LIB
BEGIN {

    # Find a KRANG_ROOT based on path to bin
    unless ($ENV{KRANG_ROOT}) {
        my @dir = splitdir(canonpath($RealBin));
        $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);
    }

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};
}

use Krang;
use Getopt::Long;
use Pod::Usage;
use HTML::Template;
use File::Temp qw(tempdir);

my @original_args = ();
my $uniqueness    = time();
my ($help, $man, $run_tests);
my @req_params = qw( HostName
  IPAddress
  InstanceHostName
  AdminPassword
  InstanceDBName
  DBUser
  DBPass);

my @opt_params = qw( FromBackup
  MySQLRootPassword
  DBHost
  InstallPath
  KrangUser
  KrangGroup
  FTPPort
  ApachePort
  SMTPServer
  FTPHostName
  InstanceDisplayName
  InstanceElementSet
  EnableSSL
  SSLApachePort
  Charset);

my %options = (map { $_ => undef } @req_params, @opt_params);
my %build_params;

# SSL directives
my @ssl_directives = qw(
  SSLApachePort
);

do_install();
exit(0);

################################
####  MAKE INSTALL METHODS  ####
################################

sub do_install {
    setup_getopts();

    # Must be running as root, check now to avoid unpacking backup
    # only to fail on this trivial condition
    exit_error("Must be run as root.") unless ($> eq "0");

    # unpack backup, which contributes to options
    unpack_backup() if $options{FromBackup};

    # load the plaform module for this distribution
    load_platform();

    # enforce requirements
    enforce_requirements();

    # Do installation
    check_prereqs();

    # working here - must create all users spec'd in backup conf
    create_unix_user_group();
    install_krang();
    configure_krang();
    install_addons();
    create_database();
    create_mysql_user();
    update_password();
    finish_install();
    start_krang();
    make_test() if ($run_tests);
    output_report();
}

# open up the backup file, if one is specified, and load unspecified
# values from the config
sub unpack_backup {
    our $BACKUP_DIR;
    our $BACKUP_CONF;
    our @BACKUP_INSTANCES;

    # open up the backup
    my $kba = $options{'FromBackup'};
    exit_error("FromBackup file '$kba' should end in .kba or .kba.gz")
      unless $kba =~ /\.kba\.gz$/
          or $kba =~ /\.kba$/;
    exit_error("FromBackup file '$kba' does not exist.")
      unless -e $kba;
    $kba = rel2abs($kba);

    # make temp directory for backup files
    $BACKUP_DIR = tempdir(
        CLEANUP => 0,
        DIR     => catdir($ENV{KRANG_ROOT}, 'tmp')
    );

    print "Unpacking backup file '$kba'.\n";
    my $cmd = "tar -x" . ($kba =~ /gz$/ ? 'z' : '') . "f $kba -C $BACKUP_DIR";
    system($cmd) && die("Error un-tarring file '$kba' to '$BACKUP_DIR'.\n");
    exit_error("FromBackup file '$kba' is not a valid Krang backup - missing conf/krang.conf.")
      unless -e catfile($BACKUP_DIR, 'conf', 'krang.conf');

    # make sure the versions match
    my $this_version   = _get_version("$ENV{KRANG_ROOT}/lib/Krang.pm");
    my $backup_version = _get_version("$BACKUP_DIR/lib/Krang.pm");
    exit_error(
        "Backup file '$kba' was made with version '$backup_version' of Krang!  This is version '$this_version'."
    ) unless $this_version == $backup_version;

    # load configuration file from backup to get defaults
    print "Loading backup configuration.\n";
    require Config::ApacheFormat;
    $BACKUP_CONF = Config::ApacheFormat->new();
    $BACKUP_CONF->read(catfile($BACKUP_DIR, 'conf', 'krang.conf'));

    # use the values from the first instance
    my @blocks = $BACKUP_CONF->get('Instance');
    my $conf   = $BACKUP_CONF->block($blocks[0]);

    # load option defaults from conf
    $options{HostName}            ||= $conf->get('HostName');
    $options{IPAddress}           ||= $conf->get('ApacheAddr');
    $options{AdminPassword}       ||= '*** RESTORED FROM BACKUP ***';
    $options{DBUser}              ||= $conf->get('DBUser');
    $options{DBPass}              ||= $conf->get('DBPass');
    $options{InstanceElementSet}  ||= $conf->get('InstanceElementSet');
    $options{InstanceDBName}      ||= $conf->get('InstanceDBName');
    $options{InstanceHostName}    ||= $conf->get('InstanceHostName');
    $options{KrangUser}           ||= $conf->get('KrangUser');
    $options{KrangGroup}          ||= $conf->get('KrangGroup');
    $options{FTPPort}             ||= $conf->get('FTPPort');
    $options{FTPHostName}         ||= $conf->get('FTPHostName');
    $options{ApachePort}          ||= $conf->get('ApachePort');
    $options{SMTPServer}          ||= $conf->get('SMTPServer');
    $options{InstanceDisplayName} ||= $conf->get('InstanceDisplayName');
    $options{Charset}             ||= $conf->get('Charset');

    # Main server SSL stuff
    if ($conf->get('EnableSSL')) {
        for my $ssl_dir (@ssl_directives) {
            $options{$ssl_dir} ||= $conf->get($ssl_dir);
        }
    }

    # load extra instance data into @BACKUP_INSTANCES
    if (@blocks > 1) {
        foreach my $block_name (@blocks[1 .. $#blocks]) {
            $conf = $BACKUP_CONF->block($block_name);
            my %instance = (
                InstanceElementSet => $conf->get('InstanceElementSet'),
                InstanceDBName     => $conf->get('InstanceDBName'),
                InstanceHostName   => $conf->get('InstanceHostName'),
            );

            push(@BACKUP_INSTANCES, \%instance);
        }
    }

    # set KrangRoot to backup directory so backup will flow from there
    $ENV{KRANG_ROOT} = $BACKUP_DIR;
}

# extract a version number from Krang.pm
sub _get_version {
    `perl -e 'require qq{$_[0]}; print \$Krang::VERSION'`;
}

# load the platform module for this dist
sub load_platform {
    our $PLATFORM;

    exit_error("Can't find data/build.db.  Do you need to run 'make build'?")
      unless -e catfile($ENV{KRANG_ROOT}, 'data', 'build.db');
    require Krang::Platform;
    %build_params = Krang::Platform->build_params;

    # add in $KRANG_ROOT/platform for platform build modules
    my $plib = catdir($ENV{KRANG_ROOT}, "platform");
    $ENV{PERL5LIB} = "$ENV{PERL5LIB}:${plib}";
    unshift @INC, $plib;

    print "Loading platform module for '$build_params{Platform}...\n";
    $PLATFORM = "$build_params{Platform}::Platform";
    eval "use $PLATFORM;";
    die "Unable to load $PLATFORM: $@"
      if $@;

    # find paths to binaries
    $MYSQL_BIN = $PLATFORM->find_bin(bin => 'mysql');
    $COPY_BIN  = $PLATFORM->find_bin(bin => 'cp');
    $CHOWN_BIN = $PLATFORM->find_bin(bin => 'chown');
    $CHMOD_BIN = $PLATFORM->find_bin(bin => 'chmod');
    $XARGS_BIN = $PLATFORM->find_bin(bin => 'xargs');
    $FIND_BIN  = $PLATFORM->find_bin(bin => 'find');
    $MAKE_BIN  = $PLATFORM->find_bin(bin => 'make');
    $ECHO_BIN  = $PLATFORM->find_bin(bin => 'echo');
    $TAR_BIN   = $PLATFORM->find_bin(bin => 'tar');
    $LN_BIN    = $PLATFORM->find_bin(bin => 'ln');
}

sub check_prereqs {
    our $PLATFORM;
    print "Checking prerequisites\n";

    # check that the platform is set up right.  This will check Perl,
    # MySQL and any libraries needed.
    $PLATFORM->verify_dependencies(mode => 'install');

    # check IP address
    my $IPAddress = $options{'IPAddress'};
    exit_error("IPAddress '$IPAddress' not bound to machine")
      unless $PLATFORM->check_ip(ip => $IPAddress);

    # AddOns files must exist
    foreach my $addon (@{$options{'WithAddon'}}) {
        exit_error("Addon file '$addon' does not exist")
          unless -e $addon;
        $addon = rel2abs($addon);
    }

    exit_error(
        "InstanceElementSet '$options{InstanceElementSet}' does not exist in Krang.\nPerhaps you misspelled it, or forgot a --WithAddon option.\n"
    ) unless _check_element_set($options{'InstanceElementSet'});

    # InstallPath must NOT exist.
    my $InstallPath = $options{InstallPath};
    if (-e $InstallPath) {
        if (-e catfile($InstallPath, 'bin', 'krang_uninstall')) {
            exit_error("Will not proceed due to existing krang install.")
              unless prompt(
                "y",
                "InstallPath '$InstallPath' already exists and seems to contain\nan existing Krang instance.\nThis program must totally and permanently\nremove this krang installation in order to proceed.\n\nIs this what you really want to do?",
                "y/n",
                "n"
              );
            {
                local $ENV{KRANG_ROOT} = $InstallPath;
                my $cmd =
                  catfile($InstallPath, 'bin', 'krang_uninstall') . ' --no_prompt --verbose';
                $cmd .= ' --MySQLRootPassword=' . $options{MySQLRootPassword}
                  if length($options{MySQLRootPassword});
                system($cmd)
                  && die(
                    "Unable to uninstall existing Krang Instance at $InstallPath.  Please remove this directory manually before running krang_install again.\n\n"
                  );
            }
        } else {
            exit_error(
                "InstallPath '$InstallPath' already exists and does not appear to belong to an existing krang instance.  Cannot continue."
            );
        }
    }

    # MySQLRootPassword must be valid, and MySQL should be running
    my $MySQLRootPassword = $options{'MySQLRootPassword'};
    my $DBHost            = $options{'DBHost'};
    my $mysql_cmd         = "$MYSQL_BIN -uroot";
    my $test_sql          = 'select "world" as hello';
    $mysql_cmd .= " -p$MySQLRootPassword" if (length($MySQLRootPassword));
    $mysql_cmd .= " -h$DBHost"            if (defined($DBHost));
    $mysql_cmd .= " 2>&1";
    my $mysql_test_output = `$ECHO_BIN '$test_sql' | $mysql_cmd`;

    unless (($mysql_test_output =~ /hello/) and ($mysql_test_output =~ /world/)) {
        print STDERR "$mysql_test_output";
        if ($mysql_test_output =~ /ERROR 1045: Access denied/) {
            exit_error("MySQLRootPassword '$MySQLRootPassword' is not valid");
        } elsif ($mysql_test_output =~ /ERROR 2002: Can\'t connect/) {
            exit_error("Can't connect to MySQL.  Start MySQL and try again.");
        } else {
            exit_error("Unable to verify MySQLRootPassword.");
        }
    }

    # Charset should be supported if it's given
    if ($options{Charset}) {
        my $charset = $options{Charset};
        require Encode;

        # see if Perl supports it
        eval { Encode::encode($charset, 'abc') };
        if ($@) {
            exit_error("Charset $charset is not supported by your version of Perl.")
              if $@ =~ /Unknown encoding/i;
            die $@;    # nothing more we can do
        }

        my $mysql_charset = mysql_charset($charset);
        $test_sql          = qq/SHOW CHARACTER SET LIKE "$mysql_charset"/;
        $mysql_test_output = `$ECHO_BIN '$test_sql' | $mysql_cmd`;
        unless ($mysql_test_output =~ /\Q$mysql_charset\E/) {
            exit_error("Charset $charset is not supported by your version of MySQL.");
        }
    }

    # InstanceDBName should NOT exist in MySQL
    my $InstanceDBName = $options{InstanceDBName};
    $test_sql          = 'SELECT 1';
    $mysql_test_output = `$ECHO_BIN '$test_sql' | $mysql_cmd $InstanceDBName`;

    unless (
        $mysql_test_output =~ /ERROR 1049[^:]*: Unknown database/ or    # for MySQL 4.*
        $mysql_test_output =~ /ERROR 1102[^:]*: Incorrect database name/
      )
    {                                                                   # for MySQL 5.*
        exit_error("Database '$InstanceDBName' already exists.  Cannot continue.");
    }
}

# sort of simulates Term::Prompt, but not really
sub prompt {

    my ($yes_val, $prompt_string, $choices, $default_val) = @_;

    #  if there is a default value, print it
    if ($default_val) {
        print $prompt_string, "($choices)", " [", $default_val, "]: ";
    } else {
        print $prompt_string, "($choices)", ": ";
    }

    $_ = <STDIN>;    # get the input from STDIN

    # remove the newline character from the end of user input
    chomp;

    if ($_) {
        if ($_ eq $yes_val) {
            return 1;
        } else {
            return 0;
        }
    } else {
        if ($default_val eq $yes_val) {
            return 1;
        } else {
            return 0;
        }
    }
}

sub create_mysql_user {

    # MySQLRootPassword must be valid, and MySQL should be running
    my $mysql_bin         = $MYSQL_BIN;
    my $MySQLRootPassword = $options{'MySQLRootPassword'};
    my $InstanceDBName    = $options{'InstanceDBName'};
    my $DBUser            = $options{'DBUser'};
    my $DBPass            = $options{'DBPass'};
    my $DBHost            = $options{'DBHost'};

    my $grant = "grant all on $InstanceDBName\.* to $DBUser";
    $grant .= '@localhost' if (!defined($DBHost));
    $grant .= " identified by '$DBPass'" if ($DBPass);

    my $mysql_grant = $ECHO_BIN . " \"$grant\" | $mysql_bin -uroot";
    $mysql_grant .= " -p$MySQLRootPassword" if (length($MySQLRootPassword));
    $mysql_grant .= " -h$DBHost"            if (defined($DBHost));

    print "Granting MySQL access to user '$DBUser' for database '$InstanceDBName'\n";
    system($mysql_grant) && exit_error("Can't grant DB access to $DBUser for $InstanceDBName.");
    print "  MySQL access granted.\n";

    # handles any backup instances
    our @BACKUP_INSTANCES;
    foreach my $instance (@BACKUP_INSTANCES) {
        my $InstanceDBName = $instance->{'InstanceDBName'};

        $grant = "grant all on $InstanceDBName\.* to $DBUser\@localhost";
        $grant .= " identified by '$DBPass'" if ($DBPass);

        my $mysql_grant = $ECHO_BIN . " \"$grant\" | $mysql_bin -uroot";
        $mysql_grant .= " -p$MySQLRootPassword" if (length($MySQLRootPassword));
        $mysql_grant .= " -h$DBHost"            if (defined($DBHost));
        print "Granting MySQL access to user '$DBUser' for database '$InstanceDBName'\n";
        system($mysql_grant) && exit_error("Can't grant DB access to $DBUser for $InstanceDBName.");
        print "  MySQL access granted.\n";

    }
}

sub create_unix_user_group {

    our $PLATFORM;

    my $gid = $PLATFORM->create_krang_group(options => \%options);

    my $uid = $PLATFORM->create_krang_user(group_id => $gid, options => \%options);

}

sub install_krang {
    my $InstallPath = $options{InstallPath};

    print "Installing Krang files into '$InstallPath'\n";
    mkdir($InstallPath) || die($!);

    chdir($ENV{KRANG_ROOT});
    my $copy = $COPY_BIN . " --no-dereference -r * $InstallPath\/";
    system($copy) && die("Can't copy: $!");

    # remove scripts that won't do anything useful in an installed
    # system
    system(
        "rm $InstallPath/bin/krang_install $InstallPath/bin/krang_makedist $InstallPath/bin/krang_upgrade"
    );

    # redo the symlinks for SSL conf if we were built with SSL
    if ($build_params{SSL}) {
        print "  Fixing SSL symlinks\n";
        my $cwd = getcwd();

        # go into the conf/ssl
        foreach my $ext qw(crl crt csr key prm) {
            my $dir = catdir($InstallPath, 'conf', "ssl.$ext");
            chdir($dir)
              or die "Could not change into directory $dir : $!";
            if (-e catfile($dir, 'Makefile')) {
                system("make") == 0
                  or die "Could not run 'make' in directory $dir : $!";
            }
        }
        chdir($cwd) or die "Could not return to directory '$cwd': $!";
    }

    print "  Fixing ownership\n";
    my $KrangUser  = $options{KrangUser};
    my $KrangGroup = $options{KrangGroup};
    my $chown      = $CHOWN_BIN . " -R  --no-dereference $KrangUser\:$KrangGroup $InstallPath";
    system($chown) && die("Can't update ownership: $!");

    # For commands
    my $chmod;

    print "  Setting group write permissions\n";
    $chmod = $CHMOD_BIN . " -R g+w $InstallPath";
    system($chmod) && die("Can't set group write permissions: $!");

    print "  Fixing file read permissions\n";
    $chmod = $CHMOD_BIN . " -R +r $InstallPath";
    system($chmod) && die("Can't fix file read permissions: $!");

    print "  Fixing directory read permissions\n";
    $chmod = $FIND_BIN . " $InstallPath -type d | " . $XARGS_BIN . " " . $CHMOD_BIN . " +rx";
    system($chmod) && die("Can't fix directory read permissions: $!");

    print "  Setting #! on scripts to " . $PERL_BIN . "\n";
    my @scripts = ();
    for my $dir ('bin', catdir('lang', 'bin')) {
        my $bin = catdir($InstallPath, $dir);
        opendir(DIR, $bin) or die $!;
        push @scripts, grep { -f $_ }
          map { catfile($bin, $_) } readdir(DIR);
        closedir DIR;
    }
    foreach my $script (@scripts) {
        open(SOURCE, $script) or die "Unable to open '$script' for reading: $!";
        my $source = do { local $/; <SOURCE> };

        $source =~ s/^#!.*$/#!$PERL_BIN/m
          or die "Couldn't find shebang line in $script to replace!";

        open(SOURCE, '>', $script) or die "Unable to write $script: $!";
        print SOURCE $source;
        close SOURCE;
    }

    # fix scripts shebang line
    my @dirs = (
        catdir($InstallPath, 'htdocs'),
        catdir($InstallPath, 'conf'),
        catdir($InstallPath, 'docs'),
        catdir($InstallPath, 'bench')
    );

    my $wanted = sub {
        my $script = $File::Find::name;

        if ($script =~ /\.(?:pl|cgi)$/) {
            open(SOURCE, $script) or die "Unable to $script: $!";
            my $source = do { local $/; <SOURCE> };

            $source =~ s/^#!\s*[\w\/\.]+(\s*.*)$/#!$PERL_BIN$1/m
              or warn "    can't find shebang line in $script\n";

            open(SOURCE, '>', $script) or die "Unable to write $script: $!";
            print SOURCE $source;
            close SOURCE;
        }
    };

    find($wanted, grep -e, @dirs);

    print "  Setting execute bits on scripts\n";

    # save some time - only search bin/ conf/ docs/ htdocs/ lib/
    my $binpath = join ' ', map { catdir($InstallPath, $_) } qw/bin conf docs htdocs lib/;

    # Set all *.pl files
    $chmod =
      $FIND_BIN . " $binpath -type f -name '*.pl' | " . $XARGS_BIN . " " . $CHMOD_BIN . " +x";
    system($chmod) && die("Can't set execute bits: $!");

    # Set all *.cgi files
    $chmod =
      $FIND_BIN . " $binpath -type f -name '*.cgi' | " . $XARGS_BIN . " " . $CHMOD_BIN . " +x";
    system($chmod) && die("Can't set execute bits: $!");

    # Set all files in bin/* and lang/bin/*
    for my $dir ('bin', catdir('lang', 'bin')) {
        my $bin = catdir($InstallPath, $dir);
        $chmod = $CHMOD_BIN . " +x $bin/*";
        system($chmod) && die("Can't set execute bits: $!");
    }
    print "  Krang files installed.\n";
}

sub configure_krang {
    print "Configuring Krang installation\n";

    my $InstallPath = $options{InstallPath};
    chdir($InstallPath);

    if ($options{FromBackup}) {
        print "Updating backup krang.conf\n";

        # processing existing krang.conf, replacing IPAddress and
        # HostName parameters needed to migrate a backup to a new machine
        open(CONF, "<", "conf/krang.conf")
          or die "Unable to open conf/krang.conf : $!";
        my @conf = <CONF>;
        close(CONF);

        open(CONF, ">", "conf/krang.conf")
          or die "Unable to open conf/krang.conf : $!";
        foreach my $line (@conf) {
            if ($line =~ /^\s*ApacheAddr\s/i) {
                print CONF "ApacheAddr $options{IPAddress}\n";
            } elsif ($line =~ /^\s*FTPAddress\s/i) {
                print CONF "FTPAddress $options{IPAddress}\n";
            } elsif ($line =~ /^\s*HostName\s/i) {
                print CONF "HostName $options{HostName}\n";
            } elsif ($line =~ /^\s*FTPHostName\s/i) {
                print CONF "FTPHostName $options{FTPHostName}\n";
            } else {
                print CONF $line;
            }
        }
        close CONF;

    } else {

        # Make custom krang.conf
        print "Creating krang.conf from specification\n";
        my $t = HTML::Template->new(filename => $ENV{KRANG_ROOT} . "/conf/krang.conf.tmpl");

        foreach my $param (keys(%options)) {

            # Filter out params which are not in HTML::Template file 'krang.conf.tmpl'
            unless (grep { $param eq $_ }
                qw/AdminPassword MySQLRootPassword InstallPath FromBackup WithAddon/)
            {
                $t->param($param => $options{$param});
            }
        }

        # add a secret
        $t->param(Secret => _generate_secret());

        # shall we insert SSL directives? The default is NO
        $t->param(EnableSSL => $options{EnableSSL});

        my $output_conf = $InstallPath . "/conf/krang.conf";
        open(OUTPUT, ">$output_conf") || die("Can't open '$output_conf' for writing: $!");
        print OUTPUT $t->output();
        close(OUTPUT);
    }
    print "  Fixing krang.conf ownership\n";
    my $KrangUser  = $options{KrangUser};
    my $KrangGroup = $options{KrangGroup};
    my $chown      = $CHOWN_BIN . " -R $KrangUser\:$KrangGroup $InstallPath/conf";
    system($chown) && die("Can't update /conf ownership : $!");

    print "  Conf written to '$InstallPath/conf/krang.conf'.\n";
}

# create the DB
sub create_database {
    my $InstallPath = $options{InstallPath};
    chdir($InstallPath);

    if ($options{FromBackup}) {

        # load database SQL
        opendir(BACKUP, catdir($ENV{KRANG_ROOT}, 'data', 'backup'))
          or die "Unable to open data/backup: $!";
        my @sql = grep { /\.sql$/ } readdir(BACKUP);
        closedir(BACKUP);

        foreach my $sql (@sql) {
            print "Creating MySQL database from backup source '$sql'.\n";
            my $file = catfile($ENV{KRANG_ROOT}, 'data', 'backup', $sql);
            my $cmd = "cat $file | mysql -uroot ";
            $cmd .= " -p$options{'MySQLRootPassword'}"
              if length $options{'MySQLRootPassword'};
            $cmd .= " -h$options{'DBHost'}"
              if defined $options{'DBHost'};
            system($cmd);
        }
    } else {

        # Create DB
        print "Creating MySQL database and loading schema\n";
        my $MySQLRootPassword = $options{'MySQLRootPassword'};
        my $DBHost            = $options{'DBHost'};
        my $createdb          = "KRANG_ROOT='' PERL5LIB='' $InstallPath/bin/krang_createdb --all";
        $createdb .= " --password $MySQLRootPassword" if (length($MySQLRootPassword));
        $createdb .= " --hostname $options{'DBHost'}" if (defined($DBHost));
        system($createdb) == 0
          or die("Error calling krang_createdb.  Unable to continue");
    }
}

sub install_addons {
    my @addons      = @{$options{WithAddon}};
    my $InstallPath = $options{InstallPath};

    foreach my $addon (@addons) {
        print "Installing addon '$addon'.\n";
        local $ENV{KRANG_ROOT} = $InstallPath;

        # needed to keep Krang::Script from loading Krang::User which
        # isn't necessarily available yet
        local $ENV{REMOTE_USER} = 1;

        my $cmd = catfile($InstallPath, 'bin', 'krang_addon_installer') . ' ' . $addon;

        # the backup may already contain the addon, so we need to
        # force install it
        $cmd .= " --force" if ($options{FromBackup});
        my $result = `$cmd`;
        exit_error("Unable to install addon '$addon':\n\n$result")
          unless $result =~ /Installation complete\./;
    }
}

sub update_password {
    return if $options{FromBackup};

    # Customize DB (Admin password)
    my $InstallPath   = $options{InstallPath};
    my $AdminPassword = $options{AdminPassword};
    print "  Changing 'admin' CMS login password to '$AdminPassword'\n";
    my $update_pw_perl = qq(
                            my (\$user) = Krang::User->find(login=>"admin");
                            \$user->password("$AdminPassword");
                            \$user->save();
                           );
    my $update_admin_pw = "KRANG_ROOT='$InstallPath' PERL5LIB='$InstallPath/lib' ";
    $update_admin_pw .= $PERL_BIN . " -MKrang::Script -MKrang::User -e '$update_pw_perl'";
    system($update_admin_pw) && die("Error changing admin password.\n");
}

sub finish_install {
    our $PLATFORM;
    $PLATFORM->finish_installation(options => \%options);
}

sub start_krang {
    my $InstallPath = $options{InstallPath};
    print "Starting Krang via $InstallPath/bin/krang_ctl\n";
    my $start = "KRANG_ROOT='' PERL5LIB='' $InstallPath/bin/krang_ctl start";
    system($start) && die("Can't start Krang: $!");
}

sub make_test {
    print "Running Krang tests...\n";

    my $AdminPassword = $options{AdminPassword};

    my $InstallPath = $options{InstallPath};
    chdir($InstallPath);

    my $make_bin  = $MAKE_BIN;
    my $make_test = "KRANG_ROOT='' PERL5LIB='' KRANG_PASSWORD='$AdminPassword' $make_bin test";
    system($make_test) && die("Error running tests: $!");
}

sub output_report {
    our $PLATFORM;
    $PLATFORM->post_install_message(options => \%options);
}

###########################
####  PRIVATE METHODS  ####
###########################

sub exit_error {
    my $cmd = $0;
    $cmd =~ s/.*\/(.+)$/$1/;

    my $message = shift;
    print STDERR "\nError: $cmd:  $message\n\n";
    exit(1);
}

sub setup_getopts {

    # Copy the original args for re-invoking later
    @original_args = @ARGV;

    $options{WithAddon} = [];
    pod2usage(2)
      unless GetOptions(
        'help'        => \$help,
        'man'         => \$man,
        'run-tests'   => \$run_tests,
        'WithAddon=s' => $options{WithAddon},
        (map { $_ . "=s" => \$options{$_} } @req_params, @opt_params),
      );

    pod2usage(1) if $help;
    pod2usage(-verbose => 2) if $man;

}

sub enforce_requirements {

    # Enforce required params
    my $error_output = "";
    foreach my $p (@req_params) {
        next if defined($options{$p});
        $error_output .= "Missing --" . $p . "\n";
    }

    if ($error_output) {
        print "Error:\n\n$error_output\n";
        pod2usage(1);
    }

    # Set opt defaults
    set_param_defaults();
}

sub set_param_defaults {
    my %defaults = (
        MySQLRootPassword  => '',
        InstallPath        => '/usr/local/krang',
        KrangUser          => 'krang',
        KrangGroup         => 'krang',
        FTPPort            => '21',
        FTPHostName        => $options{'HostName'},
        ApachePort         => '80',
        SMTPServer         => '127.0.0.1',
        EnableSSL          => 0,
        SSLApachePort      => '443',
        InstanceElementSet => 'Default',
    );

    # Set up defaults if value is not otherwise set
    while (my ($k, $dv) = each(%defaults)) {

        # Skip if value already defined
        next if (defined $options{$k});

        if ($k eq 'FTPPort') {

            # attempt to connect to port 21. else default to 2121
            my $remote;
            $remote = IO::Socket::INET->new(
                Proto    => "tcp",
                PeerAddr => $options{'IPAddress'},
                PeerPort => "ftp(21)",
                Timeout  => 1,
            ) || '';
            close $remote if $remote;

            $dv = 2121 if (not $remote);
        }

        # Set default
        $options{$k} = $dv;
    }

    # Default instancedisplayname => $instancevirtualhost
    my $idn = "InstanceDisplayName";
    unless (defined $options{$idn}) {
        $options{$idn} = $options{'InstanceHostName'};
    }
}

# check that the specified element set exists in Krang or in an addon
# to be installed (or already installed if using FromBackup).
# Returns 1 if ok, else 0.
sub _check_element_set {
    my $set = shift;

    return 1 if -d catfile($ENV{KRANG_ROOT}, "element_lib", $set);

    # check to see if we have this element_lib in one of the addons
    # already installed
    if ($options{FromBackup}) {

        # look in each addon dir
        my $addons_dir = catdir($ENV{KRANG_ROOT}, 'addons');
        opendir(my $DH, $addons_dir)
          or die "Could not open addons dir '$addons_dir' for reading: $!";
        my @dirs = readdir $DH;
        closedir($DH);
        foreach my $dir (@dirs) {
            next if ($dir =~ /^\./);    # skip hidden things
            return 1 if -d catfile($ENV{KRANG_ROOT}, 'addons', $dir, 'element_lib', $set);
        }
    }

    # else check one of the addons to install
    foreach my $addon (@{$options{WithAddon}}) {
        my $tar = $TAR_BIN . " t" . ($addon =~ /gz$/ ? "z" : "") . "f $addon";
        my $contents = `$tar`;
        if ($contents =~ m!element_lib/$set/set.conf!) {
            return 1;
        }
    }
    return 0;
}

sub _generate_secret {
    my $length = int(rand(10) + 20);
    my $secret = '';
    my @chars  = ('a' .. 'z', 'A' .. 'Z', 0 .. 9, qw(! @ $ % ^ & - _ = + | ; : . / < > ?));
    $secret .= $chars[int(rand($#chars + 1))] for (0 .. $length);
    return $secret;
}

my %MYSQL_MAP = (
    iso88591    => 'latin1',
    iso88592    => 'latin2',
    iso88598    => 'hebrew',
    iso88599    => 'latin5',
    cp1252      => 'latin1',
    windows1252 => 'latin1',
);

sub mysql_charset {
    my ($charset) = @_;
    $charset = _munge_charset($charset);
    return $MYSQL_MAP{$charset} || $charset;
}

sub _munge_charset {
    my $charset = lc shift;
    $charset =~ s/\s*//g;    # remove ws
    $charset =~ s/-//g;      # remove hyphens
    return $charset;
}
