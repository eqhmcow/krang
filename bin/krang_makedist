#!/usr/bin/perl -w
use warnings;
use strict;
use Getopt::Long;
use Pod::Usage;


=head1 NAME

krang_makedist - make a release of Krang


=head1 SYNOPSIS

Build a distribution from the contents of the current directory.

  $ bin/krang_makedist


=head1 DESCRIPTION

This script will create a distribution tar file for Krang, using the
contents of a Krang CVS checkout.


=head2 What C<krang_makedist> does

=over 4

=item 1

Extract version from Krang.pm

=item 2

Look for data/build.db.  If found, use the information there to name
the output file for a binary distribution.  If not, build a source
distribution.

=item 3

Create list of files and directories to be excluded, bench/,
conf/krang.conf, CVS/* and src/ in binary distributions.

=item 4

Creates INSTALL using pod2text on docs/ops_install.pod.

=item 5

Copies platform README from platform directory into the distribution
root, if present.

=item 6

Builds the tar.gz archive.

=back

=head1 OPTIONS

  --help      - Show usage
  --man       - Show full man page

=head1 SEE ALSO

Refer to F<docs/ops_release.pod> for information about building a new
release.


=cut



use File::Spec::Functions qw(catdir catfile splitdir rel2abs);
use FindBin qw($RealBin);
use Config;


# Set up KRANG_ROOT and PERL5LIB
BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir($RealBin);
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" :
      "${lib}";
    unshift @INC, $lib, "$lib/".$Config{archname};
}

use Krang;
use Krang::Platform;
use File::Find;
use File::Temp qw(tempdir);
use Cwd qw(cwd);

my ($help, $man);
pod2usage(2) unless
  GetOptions(help       => \$help,
             man        => \$man,
            );
pod2usage(1)             if $help;
pod2usage(-verbose => 2) if $man;
pod2usage("Unrecognized options to krang_makedist: '".join(' ', @ARGV)."'\n")
  if @ARGV;

# make a temp directory to hold dist files
my $temp = tempdir(DIR     => catdir($ENV{KRANG_ROOT}, 'tmp'),
                   CLEANUP => 1);

# figure out name
my $name;
my $source_dist = 0;
my $platform;
if (-e catfile($ENV{KRANG_ROOT}, 'data', 'build.db')) {
    # get information for a binary distribution
    my %params = Krang::Platform->build_params();
    $name = 'krang-' . $Krang::VERSION . '-' . $params{Platform} . 
      '-perl' . $params{Perl} . '-' . $params{Arch};
    $platform = $params{Platform};
} else {
    $source_dist = 1;
    $name = 'krang-' . $Krang::VERSION . '-src';
}

# make sure it's not already taken
die "$name.tar.gz already exists.\n" if -e "$name.tar.gz";

print "Building $name.\n";

my $old_dir = cwd;
chdir($temp) or die $!;

# make a link so tar will extract right
system('ln -s ' . $ENV{KRANG_ROOT} . " $name");
die "Unable to setup link." unless -e catfile($name, 'lib', 'Krang.pm');

# build file list in temp dir
print "Computing exclude file list...\n";
my $list_file = catfile($temp, 'list.txt');
open(LIST, '>', $list_file) or die $!;

find({ no_chdir => 1,
       wanted => 
         sub { 
             # print "Considering $_...\n";
             return unless 
                       m!^$name/\./tmp/.!o or            # skip tmp contents
                       m!^$name/\./bench!o or            # skip bench
                       m!^$name/\./conf/krang.conf$!o or # skip krang.conf
                       m!/CVS! or                    # skip all CVS dirs
                       m!\.cvsignore! or             # skip all CVS dirs
                       m!~$! or                      # skip Emacs droppings
                       m!#! or                       # skip Emacs droppings
                       m!krang-[^/]+\.tar\.gz! or    # skip Krang distribs
                       (not $source_dist and m!^$name/./src!o); 

             # print "Excluding $_.\n";
             print LIST "$_\n";
         } }, "$name/.");
close LIST;

# create INSTALL from docs/ops_install.pod
system("pod2text --loose $ENV{KRANG_ROOT}/docs/ops_install.pod > $ENV{KRANG_ROOT}/INSTALL");

# copy platform README if available
if ($platform and 
    -e "$ENV{KRANG_ROOT}/platform/$platform/README.$platform"){
    system("cp $ENV{KRANG_ROOT}/platform/$platform/README.$platform $ENV{KRANG_ROOT}/README.$platform");
}

# create tar file using exclude list
print "Creating tar file '$name.tar.gz'...\n";
my $dist_file = catfile($old_dir, $name . '.tar.gz');
system("tar czf $dist_file -X $list_file $name/./*") == 0
  or die "tar failed: $?";

# remove INSTALL and platform README
unlink("$ENV{KRANG_ROOT}/INSTALL") or die $!;
unlink("$ENV{KRANG_ROOT}/README.$platform") 
  if $platform and -e "$ENV{KRANG_ROOT}/README.$platform";

# remove link
unlink($name) or die $!;

print "\n\nDistribution complete in $name.tar.gz\n";
