#!/usr/bin/perl

=head1 NAME

krang_useradd - Add a new user to Krang

=head1 SYNOPSIS

krang_useradd [options] login

Specify new user/login and then supply password:

  $ krang_useradd minimum_6_character_login
  New password:
  Re-type password:

Options:

 --debug		- Prints a list of all the user's fields setable
			  from the command-line and a dump of the object
			  after save

 --email		- Set email for this user

 --fname OR		- Set the first name for this user
 --first-name

 --groups group, [...]	- Associate login with the listed groups.  By
 --g OR --G		  default, user is associated with the group
			  'default'

 --help			- Displays this menu.

 --lname OR		- Set the last name for this user
 --last_name

 --man			- Displays POD for entire script as manpage.

 --mobile-phone		- Set the mobile phone# field for this user

 --phone		- Set the phone# field for this user

N.B. Logins and passwords must at least be 6 characters long.  The current
valid groups are: admin, default, and editor

=head1 DESCRIPTION

This program provides a means to add a new user to Krang from the command-line.
Once the command is executed, the uniqueness of the login will be checked
against the system.  Provided the login is unique, a password prompt will
appear.  If the password is at least 6 characters in length, the user will be
prompted to confirm the password.  If all goes well a new user will be created
in the system.

=cut

#
# Pragmas/Module Dependencies
##############################
# Pragmas
##########
use strict;
use warnings;

# External Modules
###################
use Config;
use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use POSIX;

BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir($RealBin);
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" : "${lib}";
    unshift @INC, $lib, "$lib/".$Config{archname};

    # load Krang::Conf (don't need to load Krang here because we won't
    # be slinging elements)
    eval { require Krang::Conf };
    die <<"END" if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

# use first instance if one isn't set.  Addons are installation wide
# anyway.
BEGIN { $ENV{KRANG_INSTANCE} ||= (Krang::Conf->instances)[0]; }


# Krang-Dependent External Modules
###################################
use Getopt::Long;
use Pod::Usage;

# Internal Modules
###################
use Krang::Script;
use Krang::Group;
use Krang::User;

#
# Package Variables
####################
# Constants
############

# Globals
##########
our ($email, $first_name, $last_name, $mobile_phone, $phone);

# Lexicals
###########
my @gids;
my @groups = qw/default/;
my $debug = my $help = my $man = 0;
my %valid_groups = map {lc $_->name, $_->group_id} Krang::Group->find;

# termial I/O vars
my ($c_lflag, $fd, $termios);


# Input Validation
###################
pod2usage(2) unless GetOptions("debug"		=> \$debug,
                               "email=s"	=> \$email,
                               "first-name=s"	=> \$first_name,
                               "fname=s"	=> \$first_name,
                               "g=s"		=> \@groups,
                               "G=s"		=> \@groups,
                               "groups=s"	=> \@groups,
                               help		=> \$help,
                               "last=s"		=> \$last_name,
                               "lname=s"	=> \$last_name,
                               man		=> \$man,
                               "mobile-phone=s"	=> \$mobile_phone,
                               "phone=s"	=> \$phone);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

# get login
my $login = shift @ARGV;
pod2usage("No user 'login' specified") unless defined $login;
pod2usage("Logins must be at least 6 characters") unless
  (length $login >= 6 || grep $login eq $_, Krang::User::SHORT_NAMES);

# handle groups
################
# fix comma-delimited groups
@groups = split /,/, join(',', @groups);

# erase dupes
my %groups = map {$_, 1} @groups;

# validate groups
for (keys %groups) {
    my $gid = group_id($_);
    pod2usage("Invalid group '$_'.") unless $gid;
    push @gids, $gid;
}


# Program Body :-)
main();


=head1 METHODS

=over 4

=item * main()

Check for the existence of a user with the login '$login'.  If login is unique,
it sets the objects fields and attempts to save it to the database.

=cut

sub main {
    # lookup user
    my ($user) = Krang::User->find(login => $login);
    die("User with login '$login' already exists.") if defined $user;

    # setup terminal I/O
    $fd = fileno(STDIN);
    $termios = POSIX::Termios->new;
    $termios->getattr($fd);
    $c_lflag = $termios->getlflag;

    # get password
    my $pass = ask_pass($user);

    # constuct user
    $user = Krang::User->new(login => $login, password => $pass);
    {
        # allow symbolic references to access variables and methods of the
        # same name in for loop :)
        no strict qw/refs subs/;
        for (qw/email first_name last_name mobile_phone phone/) {
            next unless $$_;
            $user->$_($$_);
        }
    }

    if ($debug) {
my $groups = join ",", keys %groups;
print STDERR <<END;
Login:		$login
Email:		$email
First Name:	$first_name
Groups:		$groups
Last Name:	$last_name
Mobile Phone:	$mobile_phone
Phone:		$phone
END
    }

    # handle groups
    $user->group_ids(@gids);

    # save changes to user
    eval {$user->save};
    if (my $err = $@) {
        print STDERR "Attempt to add user failed: $err\n";
        exit 1;
    } else {
        if ($debug) {
            require Data::Dumper;
            print STDERR "\n", Data::Dumper->Dump([$user],['user']), "\n";
        }
        print "\nUser '$login' successfully added.\n";
    }
}


=item * $new_password = ask_pass()

Attempts to obtain a valid new password.  Returns new password on success
exits otherwise.

=cut

sub ask_pass {
    my ($user) = shift;

    # Get new pass
    ###################
    set_echo();

    print "New password: ";
    my $npass = <STDIN> || '';

    set_echo(1);

    chomp $npass;

    unless (valid_pass($npass)) {
        print STDERR "\nInvalid password!  Passwords must be at least 6 " .
          "characters.\n";
        exit 1;
    } else {

        # Confirm new pass
        ###################
        set_echo();

        print "\nRe-type password: ";
        my $dpass = <STDIN> || '';

        set_echo(1);

        chomp $dpass;

        unless ($npass eq $dpass) {
            print STDERR "\nPasswords do not match.\n";
            exit 1;
        }

        print "\n\n" if $debug;
    }

    return $npass;
}


=item * $gid = group_id( $group_name )

Returns the group id named '$group_name' and undef otherwise

=cut

sub group_id {return @_ ? $valid_groups{$_[0]} : 0;}


=item * set_echo()

Turns Termios echoing on if supplied an arg, off otherwise

=cut

sub set_echo {
    if (@_) {
        $termios->setlflag($c_lflag);
    } else {
        $termios->setlflag($c_lflag & ~ECHO);
    }

    # activate changes to terminal now
    $termios->setattr($fd, TCSANOW);
}


=item * $success = valid_pass( $password )

Returns 1 if the passed string is a valid password or 0 otherwise.

=cut

sub valid_pass {
    return length shift >= 6 ? 1 : 0;
}


=back

=cut
