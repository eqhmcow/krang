#!/usr/bin/perl 
use warnings;
use strict;

=pod

=head1 NAME

krang_createdb

=head1 SYNOPSIS

   krang_createdb

=head1 DESCRIPTION

Drops and creates all Krang databases configured in F<conf/krang.conf>.

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs);
use FindBin qw($RealBin);
use Config;

BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir($RealBin);
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" : 
      "${lib}";
    unshift @INC, $lib, "$lib/".$Config{archname};

    # load Krang
    eval { require Krang };
    die <<"END" if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

use Term::Prompt qw(prompt);
BEGIN {
    exit 1      
      unless prompt("y", "This program will drop and recreate all Krang databases (including content of data/*) for this installation.\n\nAre you sure you want to proceed?", "y/n", "y");
}

use Krang::DB qw(create_db dbh);
use Krang::Script;
use Krang::Conf qw ( InstanceElementSet KrangRoot );

# Blow away data/*
my $datadir = catfile($ENV{KRANG_ROOT}, "data", "*");
system("rm -rf $datadir");

foreach my $instance (Krang::Conf->instances()) {
    Krang::Conf->instance($instance);
      create_db();
      
      # load in templates if desired in conf
      my $e_set = InstanceElementSet;
      die("No InstanceElementSet specified") unless ($e_set);
      
      my $import_bin = KrangRoot.'/bin/krang_import';
      my $import_file = KrangRoot."/element_lib/$e_set/templates.kds";
      
      if (-f $import_file) {
          # perform import from templates.kds file
          `$import_bin $import_file`;
      }
}

