#!/usr/bin/perl
use warnings;
use strict;

=pod

=head1 NAME

krang_upload_templates - import templates from filesystem

=head1 SYNOPSIS

   krang_upload_templates  --path /path/to/templates [--url '/bleh.tmpl' --url ...]


=head1 DESCRIPTION

Upload a directory of templates into a Krang instance, via the API.
Uploaded templates will be deployed.  Checked out templates will be skipped,
as will those for which sites or caregories do not exist in the CMS.

This tool is primarily to aid developers, permitting them to work with templates 
on the filesystem (presumably version controlled by CVS or SVN), as opposed
to having to muck around with "templates.kds".


=head1 OPTIONS

The script takes the following options:

=over

=item --path

Path from which to upload templates.  Note, this will be uploaded verbatim 
to the site.  For example:

  /path/to/templates/
      +--- bleh.tmpl
      +--- site1.com/
      |     +--- bleh.tmpl
      |     +--- foo/bleh.tmpl
      +--- site2.com/
            +--- bleh.tmpl
            +--- foo/bleh.tmpl

Sites and Categories will NOT be created.  Template files in invalid directories 
will be ignored.

=item --force-checkin

If specified, templates which are checked out will be checked in rather than skipped.

=item --makecats

If specified, categories which do not exist in the CMS will be created instead of skipped.

=item --url '/bleh.tmpl' --url 'site1.com/foo/bleh.tmpl'

Limit the upload to the templates specified by their URL.  This option
may be give more than once.

=item --verbose

=item --help

=item --man

=back

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    unless ($ENV{KRANG_ROOT}) {
        my @dir = splitdir(canonpath($RealBin));
        $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);
    }

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Krang::Conf
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

use Krang::ClassFactory qw(pkg);
use Krang::ClassLoader 'Script';
use Krang::ClassLoader Conf => qw(InstanceElementSet KrangRoot);
use Krang::ClassLoader 'Site';
use Krang::ClassLoader 'Category';
use Krang::ClassLoader 'Template';
use Krang::ClassLoader 'IO';

use Getopt::Long;
use Pod::Usage;

my ($help, $man, $path, @url);
my $makecats      = 0;
my $verbose       = 0;
my $force_checkin = 0;

pod2usage(2)
  unless GetOptions(
    'path=s'        => \$path,
    'url=s'        =>  \@url,
    'verbose+'      => \$verbose,
    'force-checkin' => \$force_checkin,
    'makecats'      => \$makecats,
    'help'          => \$help,
    'man'           => \$man,
  );

pod2usage(1) if $help || !$path;
pod2usage(-verbose => 2) if $man;

# Does path exist?
pod2usage("No such directory '$path'") unless (-d $path);
print "Found template directory '$path'\n" if $verbose;

# Only certain templates?
my %upload = map {$_ => 1} @url;

# Upload templates, starting with the "global" (no site/category) templates
upload_templates($path);

# Done!
print "Upload templates complete\n" if $verbose;
exit(0);

####  PRIVATE METHODS  ####
#

# Recursive function to upload and decend
sub upload_templates {
    my $tmpl_dir = shift;
    my $category = shift;

    my $fs_path = $tmpl_dir;

    # Append category path, if we have one (non-global tmpl)
    $fs_path = catdir($tmpl_dir, $category->url) if ($category);

    # Get list of files and directories
    print "Opening '" . (($category) ? $category->url : "/") . "'\n" if $verbose;
    opendir(TMPLDIR, "$fs_path") || die("Can't open '$fs_path': " . $!);
    my @found = (readdir(TMPLDIR));
    closedir(TMPLDIR);

    my @files = grep { (-f catfile($fs_path, $_)) } (@found);
    my @dirs =
      grep { not(/^\.{1,2}$/) and not(/^\.svn$/) and not(/^CVS$/) and (-d catfile($fs_path, $_)) }
        (@found);

    print "Found dirs: '" . join("', '",  @dirs) . "'\n"  if ($verbose > 1);
    print "Found files: '" . join("', '", @files) . "'\n" if ($verbose > 1);


    # Upload template files in this dir
    foreach my $f (@files) {

        # Only .tmpl files
        unless ($f =~ /\.tmpl$/) {
            print "  Skipping '$f' (not a *.tmpl file)\n" if $verbose;
            next;
        }

        # Only certain templates?
        if (@url) {
            my $url = $category ? $category->url . $f : "/$f";
            print "URL: $url\n";
            next unless $upload{$url};
        }

        # Try to find template.
        my $category_id = undef;
        $category_id = $category->category_id if $category;
        my ($t) = pkg('Template')->find(
            category_id => $category_id,
            filename    => $f
        );

        # Create it if we can't find it.
        unless ($t) {
            $t = pkg('Template')->new(
                category => $category,
                filename => $f
            );
        }

        # Do we have access?
        if ($t->checked_out()) {
            my ($checked_out_user) = pkg('User')->find(user_id => $t->checked_out_by);
            my $cou_login = $checked_out_user->login();
            unless ($cou_login eq 'system') {
                if ($force_checkin) {
                    $t->checkin;
                    if ($t->checked_out) {
                        print STDERR "*** UNABLE TO CHECK IN '$f' ***\n";
                    } else {
                        print "Checked in '$f' (was checked out by '$cou_login')\n" if $verbose;
                    }
                } else {
                    print "  Skipping '$f' (checked out by '$cou_login')\n" if $verbose;
                    next;
                }
            }
        }

        print "  Uploading '$f'\n" if $verbose;
        $t->checkout();

        # Read template file from disk
        my $fq_filename = catfile($fs_path, $f);
        print "    Opening '$fq_filename' for read\n" if $verbose > 1;
        my $TMPL    = pkg('IO')->io_file($fq_filename);
        my @content = (<$TMPL>);
        close($TMPL);

        # Upload new content
        $t->content(join("", @content));

        # Save, check in and deploy
        $t->save();
        $t->checkin();
        $t->deploy();
    }

    # For each sub-directory, verify category exists and decend if so
    foreach my $d (@dirs) {
        if ($category) {

            # If we're in a site
            my $new_cat_path = catdir($category->url, $d);
            my ($c) = pkg('Category')->find(url => $new_cat_path . "/");
            if ($c) {
                upload_templates($tmpl_dir, $c);
            } elsif ($makecats) {

                # Create missing directory
                my $newcat;
                eval {
                    $newcat = pkg('Category')->new(
                        dir       => $d,
                        parent_id => $category->category_id
                    );
                    $newcat->save();
                };
                if ($@) {
                    print "  Unable to create '$new_cat_path' ($@)\n";
                    next;
                }
                print "  Created new category '$new_cat_path'\n";
                upload_templates($tmpl_dir, $newcat);
            } else {
                print "  Skipping '$new_cat_path' (No category found)\n" if $verbose;
            }

        } else {

            # No site yet -- still global templates
            my ($s) = pkg('Site')->find(url => $d);
            die("Can't find site '$d'") unless ($s);
            my ($root_cat) = pkg('Category')->find(url => $s->url . "/");
            upload_templates($tmpl_dir, $root_cat);

        }
    }
}

sub element_lib_path {

    # Try addons/
    my $libdir = catdir(KrangRoot, 'addons', InstanceElementSet, 'element_lib', InstanceElementSet);
    return $libdir if (-d $libdir);

    # Try legacy element_lib
    $libdir = catdir(KrangRoot, 'element_lib', InstanceElementSet);
    return $libdir if (-d $libdir);
}

