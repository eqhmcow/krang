#!/usr/bin/perl -w



=head1 NAME

krang_makedist - make a release of Krang


=head1 SYNOPSIS

  $ krang_makedist


=head1 DESCRIPTION

This script will create a distribution tar file for Krang.


=head2 What C<krang_makedist> does

=over 4


=item 1

Extract version from Krang.pm


=item 2

Tag files in working directory

If tag already exists (i.e., you're re-building a distribution
due to a bug) you have to "force" a cvs tag manually (e.g., C<cvs tag -F 'V1_2'>).


=item 3

Export krang from CVS using tagged version (to F</tmp> directory)


=item 4

Delete excluded directories (i.e., bench/, src/).


=back



=head1 OPTIONS

None

=cut



use File::Spec::Functions qw(catdir catfile splitdir rel2abs);
use FindBin qw($RealBin);
use Config;


# Set up KRANG_ROOT and PERL5LIB
BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir($RealBin);
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" :
      "${lib}";
    unshift @INC, $lib, "$lib/".$Config{archname};

    # load Krang::Conf (don't need to load Krang here because we won't
    # be slinging elements)
}

use Krang;


my $krang_version;
my $uniqueness = time();


# Make dist
{
    get_krang_version();
    create_cvs_tag();
    export_krang();
    exclude_directories();
    create_tarball();
    report_status();
    cleanup_makedist();

    exit(0);
}



###########################
####  PRIVATE METHODS  ####
###########################

sub get_krang_version {
    $krang_version = $Krang::VERSION;
    print "Found version: '$krang_version'\n";
}


sub create_cvs_tag {
    my $ver_string = get_ver_string();

    # Go to working dir
    chdir($ENV{KRANG_ROOT});

    print "Checking for CVS tag '$ver_string'...\n";
    if (cvs_tag_exists($ver_string)) {
        print STDERR <<EOT;
Error: TAG EXISTS!

It appears that Krang has already been tagged with '$ver_string'.  This 
is usually an indication that you did not update \$VERSION in Krang.pm.

To continue WITHOUT updating the \$Krang::VERSION you must first delete 
this tag from CVS.

To delete tag:

  cvs tag -d '$ver_string'

EOT
        exit(1);
    }

    print "Tagging CVS repository: '$ver_string'...\n";

    my $cvs_cmd = "cvs tag '$ver_string'";
    my $cvs_output = `$cvs_cmd`;
    print "Tagging done.\n"
}


sub export_krang {
    my $ver_string = get_ver_string();

    # Check for version and export if found
    unless (cvs_tag_exists($ver_string)) {
        print STDERR "Can't find CVS tag '$ver_string'.  Exiting.";
        exit(1);
    }

    # Make directory for work
    my $export_dir = get_export_dir();
    mkdir($export_dir);

    # Go to working dir
    chdir($export_dir);

    # CVS export by tag
    my $cvs_export_cmd = "cvs export -r $ver_string krang";
    print "Exporting Krang to $export_dir...\n";
    my $cvs_output = `$cvs_export_cmd`;
    print "Export complete.";
}


sub exclude_directories {}


sub create_tarball {}


sub report_status {}


sub cleanup_makedist {}



##########################
####  IMPLEMENTATION  ####
##########################

# Return version string used by CVS for tag
sub get_ver_string {
    my $ver_string = "V". $krang_version;
    $ver_string =~ tr/\./\_/;
    return $ver_string;
}


# Return the export directory path
sub get_export_dir {
    my $export_dir = "/tmp/krang_". get_ver_string() ."_". $uniqueness;
    return $export_dir;
}

# Return Boolean 1 if specified tag exists in Krang
sub cvs_tag_exists {
    my $tag = shift;

    my $cvs_check_tag_cmd = "cvs -n update -r $tag lib/Krang.pm 2>\&1";
    my $tagcheck_output = `cd \$KRANG_ROOT && $cvs_check_tag_cmd`;

    # No output == tag exists
    return not($tagcheck_output);
}


