#!/usr/bin/perl 
use warnings;
use strict;

=pod

=head1 NAME

krang_smoke_test - Run the Krang smoke tests and send the results to Smolder

=head1 SYNOPSIS

Simple:

  $ krang_smoke_test

=head1 DESCRIPTION

This script will run Krang's test suite and report the results back
to our project's Smolder server. It is intended to be run on an SVN
checkout and not a real installation.

=head1 OPTIONS

The following options may be passed to affect the behavior:

=over

=item --no-update

Don't pull a new update from SVN. Just run the code that's there.

=item --no-rebuild

Don't rebuild Krang, just run with what's there.

=item --smolder-category

This sets the category for this uploaded test run in Smolder

=back

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} = catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    # load Krang::Conf (don't need to load Krang here because we won't
    # be slinging elements)
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

# don't run the tests if we're already running
BEGIN {
    use Fcntl qw(:flock);
    open LH, $0
      or die localtime() . ": Can't open $0 for locking: $!\n";
    if(!flock(LH, LOCK_EX | LOCK_NB)) {
        print "Tests are currently running. Exiting.\n";
        exit(0);
    }
}

END {
    close LH or die localtime() . ": Can't close $0: $!\n";
}

use Pod::Usage;
use Getopt::Long;
use WWW::Mechanize;

my ($help, $man, $category, $no_update, $no_rebuild);

# we might make these configurable in the future
my $project_id = 3;
my $server     = 'http://smolder.plusthree.com';
GetOptions(
    help                                            => \$help,
    man                                             => \$man,
    'smolder_category|smolder-category|category=s'  => \$category,
    'no_update|no-update|no_updates|no-updates'     => \$no_update,
    'no_rebuild|no-rebuild|no_rebuilds|no-rebuilds' => \$no_rebuild,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

# get the lastest version of this checkout from SVN
chdir($ENV{KRANG_ROOT});
if($no_update or `svn update` =~ /Updated to/i) {

    # stop any possible previous runs
    system('bin/krang_ctl stop') == 0 or die "Could not stop Krang";

    # gives us a clean slate to start
    unless($no_rebuild) {
        system('bin/krang_build --with-ssl --rebuild') == 0 or die "Could not build Krang";
    }
    system('bin/krang_createdb --destroy --no_prompt test1') == 0
      or die "Could not build DB for test1";
    system('bin/krang_createdb --destroy --no_prompt test2') == 0
      or die "Could not build DB for test2";

    # run the test
    system('make restart') == 0            or die "Could not restart Krang";
    system('make test_archive') == 0       or die "Could not run test suite";
    system('bin/krang_ctl stop') == 0 or die "Could not stop Krang";

    # now send the results off to smolder
    send_results_to_smolder();

} else {
    print "No updates to Krang\n";
    exit(0);
}

END {

    # now clean up
    unlink('krang_test_run.tar.gz') if -e 'krang_test_run.tar.gz';
}

# upload the krang tests results to smolder
sub send_results_to_smolder {
    my $mech = WWW::Mechanize->new();
    $mech->get("$server/app");
    unless($mech->status eq '200') {
        print "Could not reach $server/app successfully. Received status " . $mech->status . "\n";
        exit(1);
    }

    # now go to the add-smoke-report page for this project
    $mech->get("$server/app/public_projects/add_report/$project_id");
    if($mech->status ne '200' || $mech->content !~ /New Smoke Report/) {
        print "Could not reach the Add Smoke Report form in Smolder!\n";
        exit(1);
    }
    $mech->form_name('add_report');
    my %fields = (
        report_file  => 'krang_test_run.tar.gz',
        platform     => `cat /etc/redhat-release`,
        architecture => `uname -m`,
    );
    $fields{category} = $category if $category;

    # get the comments from svn
    my @lines = `svn info`;
    @lines = grep { $_ =~ /URL|Revision|LastChanged/ } @lines;
    $fields{comments} = join("\n", @lines);
    $mech->set_fields(%fields);
    $mech->submit();

    my $content = $mech->content;
    if($mech->status ne '200' || $content !~ /Recent Smoke Reports/) {
        print "Could not upload smoke report with the given information!\n";
        exit(1);
    }
    $content =~ /#(\d+) Added/;
    my $report_id = $1;

    print "\nReport successfully uploaded as #$report_id.\n";
}

