#!/usr/bin/env perl
use warnings;
use strict;

=pod

=head1 NAME

krang_charset_convert_data - convert the character set of krang data.

=head1 SYNOPSIS

B<NOTE>: It is important to back up your data before running this
script. If used incorrectly ic royally screw up your data. Please,
please, B<please> back up before using this.

    krang_charset_convert_data --from ISO8859-1 --to UTF-8

=head1 DESCRIPTION

This script will convert your data in the Krang database from one
character set to another. This is useful if you've been running
Krang for a while and your site needs to change its character set.

NOTE: If your tables aren't already in the C<--to> format, 
<bin/krang_charset_convert_tables> must be run AFTER this script.
Either way, the charset directive in krang.conf should not be changed
to the C<--to> format until both your data and tables are updated.

=head1 OPTIONS

The script takes the following options:

=over

=item --from

Specify the character set your data is already in. If you never set
Krang to use a particular character set, chances are you are using
either an C<ISO-8859> version or C<windows-1252>. You can also look
to see if the site being served declares its character set.

When in doubt, you'll probably have to guess and try one. Make sure to
backup so you can roll it back if your guess was wrong.

=item --to

Specify the character set that you are converting your data to.

=item --all-instances

By default this will just run for all of the tables in the given
instance (as set in C<$ENV{KRANG_INSTANCE}>). But you can optionally
tell it to run for every instance installed.

=item --site-id

By default this will run for all of the sites in the give instance
instance (as set in C<$ENV{KRANG_INSTANCE}>). But you can optionally
tell it to run for just a specific site. This option can be specified
multiple times.

=item --only-story-id

By default this will run for all tables and all stories, but you can optionally tell it to 
run only for a specific story (and no non-story data). This can be specified multiple times.

=item --skip-story-id

This parameter (which is mutually exclusive with --only-story-id) will convert all
tables and all stories except the given one. This can be specified multiple times.

=item --test-mode

This is a mode in which actions will be displayed but not performed.

=item --verbose

Show more information about what is being converted.

=back

=head2 Supported Encodings

Krang supports any character encoding set that is listed by Perl's
built-in L<Encode::Supported>. If you need other encodings than
Perl provides by default, you can install other Perl encoding modules
on your system.

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    unless ($ENV{KRANG_ROOT}) {
        my @dir = splitdir(canonpath($RealBin));
        $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);
    }

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END

    # add in $KRANG_ROOT/platform for platform build modules
    my $plib = catdir($ENV{KRANG_ROOT}, "platform");
    $ENV{PERL5LIB} = "$ENV{PERL5LIB}:${plib}";
    unshift @INC, $plib;
}
use Pod::Usage;
use Getopt::Long;

use Krang::ClassFactory qw(pkg);
use Krang::ClassLoader 'Script';
use Krang::ClassLoader 'Site';
use Krang::ClassLoader 'Story';
use Krang::ClassLoader 'Charset';
use Krang::ClassLoader 'User';
use Krang::ClassLoader DB => qw(dbh forget_dbh);
use Encode qw(from_to);
use Storable qw(nfreeze thaw);
use MIME::Base64 qw(encode_base64 decode_base64);

# Hot pipes
local ($|) = 1;

# options
my (
    $from,          $to,             $help,           $man,       $all_instances,
    @only_site_ids, @only_story_ids, @skip_story_ids, $test_mode, $v
);
GetOptions(
    'from=s'          => \$from,
    'to=s'            => \$to,
    'help'            => \$help,
    'man'             => \$man,
    'test_mode'       => \$test_mode,
    'all-instances'   => \$all_instances,
    'site-id=s'       => \@only_site_ids,
    'only-story-id=s' => \@only_story_ids,
    'skip-story-id=s' => \@skip_story_ids,
    'test-mode'       => \$test_mode,
    'verbose'         => \$v,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

die "You must supply a --from encoding!\n" unless $from;
die "You must supply a --to encoding!\n"   unless $to;
die "You can't use both --all-instances and --site-id at the same time!\n"
  if $all_instances and @only_site_ids;
die "You can't use both --all-instances and a specific story ID!\n"
  if $all_instances and (@only_story_ids or @skip_story_ids);
die "You can't use both --only-story-id and --skip-story-id at the same time!\n"
  if @only_story_ids and @skip_story_ids;

print "* * * TEST MODE - NO ACTUAL CHANGES WILL BE WRITTEN TO THE DATABASE * * *\n\n"
  if $test_mode;

# figure out which instances we're going to use, and loop through them
foreach my $instance ($all_instances ? pkg('Conf')->instances() : ($ENV{KRANG_INSTANCE})) {
    pkg('Conf')->instance($instance);

    # set remote user (might differ across instances)
    set_remote_user();

    # get a clean (un-cached) DB handle
    forget_dbh();
    my $dbh = dbh();

    # make sure MySQL interprets incoming & outgoing data in the original charset since
    # the tables haven't yet been converted (except when running special manual-1252 mode)
    $dbh->do('SET names ' . pkg('Charset')->mysql_charset($from));

    # figure out which sites (and hence, which stories) we're going to use for this instance
    my @site_ids = @only_site_ids ? @only_site_ids : pkg('Site')->find(ids_only => 1);
    next unless @site_ids;

    my @story_ids =
      @only_story_ids ? @only_story_ids : pkg('Story')->find(ids_only => 1, site_id => \@site_ids);
    if (@skip_story_ids) {
        my %skip_id = map { $_ => 1 } @skip_story_ids;
        @story_ids = grep { not $skip_id{$_} } @story_ids;
    }

    # placeholders when using site_ids in queries
    my $site_ph  = join(', ', ('?') x scalar @site_ids);
    my $story_ph = join(', ', ('?') x scalar @story_ids);

    my %tables = (

        (
            @story_ids == 0 ? ()
            :

              (
                story => {
                    fields    => [qw(title slug notes)],
                    extra_sql => " WHERE story_id IN ($story_ph) ",
                    binds     => \@story_ids
                }
              )
        ),

        (
            @only_story_ids ? ()
            :

              (
                category => {
                    fields    => [qw(dir)],
                    extra_sql => " WHERE category.site_id IN ($site_ph)",
                    binds     => \@site_ids,
                },
                contrib      => {fields => [qw(prefix first middle last suffix bio)],},
                contrib_type => {fields => [qw(type)],},
                desk         => {fields => [qw(name)],},
                list         => {fields => [qw(name)],},
                list_group   => {fields => [qw(name description)],},
                list_item    => {fields => [qw(data)],},
                media        => {
                    fields => [qw(title filename caption copyright notes alt_tag)],
                    extra_sql =>
                      " JOIN category c USING (category_id) WHERE c.site_id IN ($site_ph)",
                    binds => \@site_ids,
                },
                media_type => {fields => [qw(name)],},
                template   => {
                    fields => [qw(content)],
                    extra_sql =>
                      " JOIN category c USING (category_id) WHERE c.site_id IN ($site_ph)",
                    binds => \@site_ids,
                },
                template_version => {fields => [qw(data)], id_fields => [qw(template_id version)]},
                user => {fields => [qw(first_name last_name login password)],}
              )
        )
    );

    print "Converting instance '$instance'\n" if $v;
    print "  For site(s) " . join(', ', map { "#$_" } @site_ids) . "\n" if $v;

    # convert all the fields in the tables listed above
    foreach my $name (keys %tables) {
        my $table     = $tables{$name};
        my @fields    = @{$table->{fields}};
        my @id_fields = $table->{id_fields} ? @{$table->{id_fields}} : ("${name}_id");
        my @binds;
        print "  Converting field(s) " . join(', ', @fields) . " of table '$name'\n" if $v;

        # get the fields we need to manipulate and the id fields to identify them by
        my $sql =
          'SELECT ' . join(', ', map { "$name.$_ AS `$_` " } @fields, @id_fields) . " FROM $name";
        if ($table->{extra_sql}) {
            $sql .= $table->{extra_sql};
            @binds = @{$table->{binds}};
        }
        my $sth = $dbh->prepare_cached($sql, {"mysql_use_result" => 1});

        # what we need to update the info
        my $update_sql =
            "UPDATE $name SET "
          . join(', ', map { " $_ = ? " } @fields)
          . " WHERE "
          . join(' AND ', map { " $_ = ? " } @id_fields);
        my $update_sth = $dbh->prepare_cached($update_sql, {"mysql_use_result" => 1});
        $sth->execute(@binds);
        my $count = 0;
        while (my $row = $sth->fetchrow_hashref) {
            my @data = map { $row->{$_} } @fields;
            my @ids  = map { $row->{$_} } @id_fields;

            # convert each data field
            @data = map { convert_scalar($_) || '' } @data;

            print "    Updated $count rows in $name                \r" if $v;

            # now put the data back
            $update_sth->execute(@data, @ids) unless $test_mode;
            $count++;
        }
        print "    Updated $count rows in $name              \n" if $v;
    }

    # now that template contents have changed, redeploy all deployed templates
    unless (@only_story_ids) {
        foreach my $template_id (pkg('Template')->find(ids_only => 1)) {
            my ($template) = pkg('Template')->find(template_id => $template_id);
            if ($template->deployed) {
                $template->deploy unless $test_mode;
                print "  Re-deployed template $template_id\n" if $v;
            }
        }
        print "\n(DIDN'T ACTUALLY RE-DEPLOY TEMPLATES - RUNNING IN TEST-MODE)\n\n"
          if ($test_mode and $v);
    }

    # if there are no stories, no need to convert element table
    next unless @story_ids;

    # otherwise, dig into the elements' data to decode/unthaw it, convert it and then
    # thaw/decode it and store it.
    print "  Converting element data\n" if $v;

    # we need to select all the elements for the sites in question. this means all
    # elements and sub-elements attached to the sites' stories, and - unless we're
    # only converting stories - all elements attached to categories
    my $fetch_sth =

      $dbh->prepare_cached(
        (
            @story_ids == 0 ? ''
            :

              qq/
          SELECT e.element_id AS id, e.data AS data FROM element e 
          JOIN story s ON (s.element_id = e.root_id)
          WHERE s.story_id IN ($story_ph)
          /
        ) .

          (
            @only_story_ids ? ''
            :

              qq/
          UNION DISTINCT
          SELECT e.element_id AS id, e.data AS data FROM element e
          JOIN category c ON (c.element_id = e.root_id)
          WHERE c.site_id IN ($site_ph)
          /
          ),
        {"mysql_use_result" => 1}
      );

    my $update_sth = $dbh->prepare_cached('UPDATE element SET data = ? WHERE element_id = ?',
        {"mysql_use_result" => 1});
    $fetch_sth->execute(@story_ids, @only_story_ids ? () : @site_ids);

    my $count = 0;
    my $loops = 0;

    while (my $row = $fetch_sth->fetchrow_hashref) {
        my $data = $row->{data};
        my $id   = $row->{id};

        $loops++;
        print "Processing element " . $loops . " (id: $id, modified: $count)                \r"
          if $v;

        next unless defined $data;

        # try and thaw it to tell if it was frozen with Storable
        my $frozen;
        eval {
            no warnings;

            # if data is valid base64...
            if ($data =~ /^[A-Za-z0-9\+\/\=\n]+$/) {

                # and thawing its decoded value returns an object reference...
                if (my $ref = ref(my $thawed = thaw(decode_base64($data)))) {

                    # then this eval will succeed and we can assume
                    # object was frozen. However there are
                    # exceptions. The string 'BRANCHING' for instance
                    # yields a ref type of 'SCALAR'. Check if $thawed
                    # can be deferenced to be sure it's really a ref.
                    # If it is not, the error message is: 'Can't call
                    # method "FETCH" without a package or object
                    # reference at ...'.
                    eval { my $bogus = $$thawed } if $ref eq 'SCALAR';
                    unless ($@) {
                        $data   = $thawed;
                        $frozen = 1;
                    }
                }
            }
        };

        $data = convert_element_data($data);
        if (defined $data) {
            if ($frozen) {
                $data = encode_base64(nfreeze($data));
            }
            $update_sth->execute($data, $id) unless $test_mode;
            $count++;
        } else {
            warn "  !Could not convert element #$id which is a "
              . (ref $data ? ref $data : 'scalar') . "!\n";
        }
    }
    print "    Converted $count elements\n" if $v;
    print "\n* * * TEST MODE - NO ACTUAL CHANGES WERE WRITTEN TO THE DATABASE * * *\n\n"
      if ($test_mode && $v);
}

# restore original instance (in case we were called by another Krang script)
pkg('Conf')->instance($ENV{KRANG_INSTANCE}) if $ENV{KRANG_INSTANCE};

sub convert_element_data {
    my $data = shift;
    return '' unless defined $data;
    my $ref  = ref $data;
    if (!$ref) {
        return convert_scalar($data);
    } elsif ($ref eq 'SCALAR') {
        $$data = convert_element_data($$data);
        return $data;
    } elsif ($ref eq 'ARRAY') {
        return [map { convert_element_data($_) } @$data];
    } elsif ($ref eq 'HASH') {
        return {map { $_ => convert_element_data($data->{$_}) } %$data};
    } else {

        # we don't know how to convert it, so leave it unchanged
        return $data;
    }
}

my %cp1252_string_to_html_entity = (
    '128' => '&euro;',
    '130' => '&sbquo;',
    '131' => '&#x192;',
    '132' => '&bdquo;',
    '133' => '&hellip;',
    '134' => '&dagger;',
    '135' => '&Dagger;',
    '136' => '&circ;',
    '137' => '&permil;',
    '138' => '&Scaron;',
    '139' => '&lsaquo;',
    '140' => '&OElig;',
    '142' => '&#x17D;',
    '145' => '&lsquo;',
    '146' => '&rsquo;',
    '147' => '&ldquo;',
    '148' => '&rdquo;',
    '149' => '&bull;',
    '150' => '&ndash;',
    '151' => '&mdash;',
    '152' => '&tilde;',
    '153' => '&trade;',
    '154' => '&scaron;',
    '155' => '&rsaquo;',
    '156' => '&oelig;',
    '158' => '&#x17E;',
    '159' => '&Yuml;',
);

sub cp1252_string_to_html_entity {
    my $orig_string = shift;
    my ($prefix, $value) = ($orig_string =~ /^\&(\#|x|X)(.*);$/);
    return $orig_string unless ($prefix && $value);

    $value = hex($value) if ($prefix eq 'x' || $prefix eq 'X');
    my $html_entity = $cp1252_string_to_html_entity{$value};
    return $html_entity ? $html_entity : $orig_string;
}

sub convert_scalar {
    my $data = shift;
    return '' unless defined $data;

# convert manually-entered Windows-CP1252 strings (e.g. &#151;) to HTML-entity equivalents (e.g. &mdash;)
    $data =~
      s/((\&\#\d\d\d\;)|(\&[xX][0-9a-fA-F][0-9a-fA-F];))/@{[cp1252_string_to_html_entity($1)]}/sg
      unless (pkg('Charset')->mysql_charset($from) ne 'latin1');

    # now perform actual charset conversion
    from_to($data, $from, $to);
    return defined $data ? $data : '';
}

sub set_remote_user {
    my @user = (
                pkg('User')->find(
                                  ids_only => 1,
	                          login    => 'system'
                                 )
               );
    if (@user) {
        $ENV{REMOTE_USER} = $user[0];
    } else {
        warn(
             "Unable to find 'system' user.  All Krang instances must contain the special 'system' account.  Falling back to using special user_id 1.\n"
	    );
        $ENV{REMOTE_USER} = 1;
    }
}
