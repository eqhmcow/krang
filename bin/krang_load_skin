#!/usr/bin/perl 
use warnings;
use strict;

=pod

=head1 NAME

krang_load_skin - loads a Krang skin

=head1 SYNOPSIS

To install the Red skin:

  bin/krang_load_skin Red

=head1 DESCRIPTION

This script loads skins into Krang.  For information about skins:

  perldoc docs/skins.pod

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" : 
      "${lib}";
    unshift @INC, $lib, "$lib/".$Config{archname};

    # load Krang::Conf (don't need to load Krang here because we won't
    # be slinging elements)
    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

# use first instance if one isn't set.  Skins are installation wide
# anyway.
use Krang::ClassFactory qw(pkg);
BEGIN { $ENV{KRANG_INSTANCE} ||= (pkg('Conf')->instances)[0]; }
use Krang::Script;

use Krang::ClassLoader Conf => qw(KrangRoot);
use Krang::ClassLoader 'Skin';

die "Wrong number of arguements.\n\nUsage: $0 skin-name.\n"
  unless @ARGV == 1;
pkg('Skin')->new(name => $ARGV[0])->install();

