#!/usr/bin/perl 
use warnings;
use strict;

=pod

=head1 NAME

krang_addon_uninstaller - removes addons from Krang

=head1 SYNOPSIS

To uninstall an addon:

  bin/krang_addon_uninstaller AddOnName

=head1 DESCRIPTION

This script removes addons from Krang.  Do this instead of just
deleteing the directory from addons/ since it handles dependencies and
allows addon uninstall scripts to get run.

=head1 OPTIONS

The following options are available:

=over

=item --force

Force uninstallation even if dependencies are still present.

=item --verbose

Print information about what's happening.

=item --help

Show usage information.

=item --man

Show full manpage. 

=back

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {
    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" : 
      "${lib}";
    unshift @INC, $lib, "$lib/".$Config{archname};

    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END
}

# process command options
use Pod::Usage;
use Getopt::Long;
our ($help, $man, $force, $name);
our $verbose;
BEGIN {
    $verbose = 0;
    pod2usage(2) unless
      GetOptions(help       => \$help,
                 man        => \$man,
                 'verbose+' => \$verbose,
                 force      => \$force,
                );
    pod2usage(1)             if $help;
    pod2usage(-verbose => 2) if $man;
    
    if (@ARGV == 1) {
        $name = $ARGV[0];
    } else {
        pod2usage("Bad arguments to krang_addon_uninstaller: '" . 
                  join(' ', @ARGV) . "'\n");
    }
}

# use first instance if one isn't set.  Addons are installation wide
# anyway.
use Krang::ClassFactory qw(pkg);
use Krang::ClassLoader Conf => qw(KrangRoot);
BEGIN { $ENV{KRANG_INSTANCE} ||= (pkg('Conf')->instances)[0]; }
use Krang::ClassLoader 'Script';
use Krang::ClassLoader 'AddOn';

my ($addon) = pkg('AddOn')->find(name => $name);
die("Can't find addon named '$name'!  The following addons are installed:\n" .
    join("\n", map { "\t" . $_->name . " v" . $_->version } 
         pkg('AddOn')->find()) . "\n")
  unless $addon;

# do the uninstall
$addon->uninstall(verbose => $verbose, force => $force);

print "Uninstallation complete.\n";
